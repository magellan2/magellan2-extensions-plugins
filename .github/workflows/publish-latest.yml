name: Create pre-release
# Test, build, and publish a release and tag it with "version-latest" on pushes to master

on:
  push:
    branches:
      - "master"

jobs:
  build:
    name: Create pre-release
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1

    - name: Generate version string
      id: get-version
      run: |
        VERSION=1.1.0
        SHORT=$(echo "${VERSION}" | cut -d. -f-2)
        echo "::set-env name=SHORT::$SHORT"
        echo "::set-env name=VERSION::$VERSION"
        echo "::set-env name=TAG::$(echo "v${SHORT}-latest")"

    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11

    - name: Sanity check
      run: |
        # tag is v1.2-latest
        if [[ "${TAG}" =~ ^v[0-9][0-9]*[.][0-9][0-9]*-latest$ ]]; then
          echo tag $TAG okay
        else
          echo "tag (${VERSION}, ${SHORT}) $TAG not okay!"
          exit 1
        fi

        for dir in *; do 
          if [ -e $dir/.build.number ]; then 
            echo $dir

            # most recent tag has older build number
            BUILD=$(cat $dir/.build.number | grep build.number | cut -f2 -d"=")

            LASTTAG=$(git tag -l v* --sort='-committerdate' | head -1)
            OLDBUILD=$(git show ${LASTTAG}:$dir/.build.number | grep build.number | cut -f2 -d"=")
            if [[ "$OLDBUILD" =~ ^[0-9][0-9]*$ ]]; then
              if (( BUILD == OLDBUILD )); then
                echo "not adding $dir, build number $BUILD has not changed"
              else
                # last -latest tag has older build number
                LASTTAG=$(git tag -l v*-latest --sort='-committerdate' | head -1)
                OLDBUILD=$(git show ${LASTTAG}:$dir/.build.number | grep build.number | cut -f2 -d"=")
                if [[ "$OLDBUILD" =~ ^[0-9][0-9]*$ ]]; then
                  if (( BUILD <= OLDBUILD )); then
                    echo "not adding $dir, build.number $BUILD has not changed"
                  else
                    echo "found new build $BUILD in $dir"
                    installer=$(ls $dir/release/*)
                    if [ -f "$installer" ]; then
                      uploads="$uploads $installer"
                    else
                      echo "could not find installer $installer"
                    fi
                  fi
                else
                  echo "warning, previous build not found for ${TAG}!"
                fi
              fi
            else
              echo "bad tag or build $LASTTAG - $OLDBUILD in $dir"
            fi
          fi
        done
        echo "::set-env name=UPLOADS::$(echo $uploads)"
        
        
    - name: Build with ant
      run: ant -noinput -buildfile build.xml

    - name: check if release is wanted
      run: |
        if [ -z "${{ env.UPLOADS }}" ]; then
          echo "No new versions found. To create a new release, you must update and push the .build.number file of one or more plugins."
          exit 1
        fi

    - name: Publish git tag "vX.Y-latest"
      run: |
        git config user.name "$GITHUB_ACTOR"
        git config user.email "$GITHUB_ACTOR@users.noreply.github.com"
        git remote -v
        git tag -f "${TAG}"
        REMOTE="https://$GITHUB_ACTOR:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY.git"
        git push --force "$REMOTE" "${TAG}"

    - name: Create release
      uses: meeDamian/github-release@2.0
      with:
        prerelease: true
        allow_override: true
        token: ${{ secrets.GITHUB_TOKEN }}
        commitish: master
        tag: ${{ env.TAG }}
        name: Pre-Release  v${{ env.VERSION }}
        body: |
          These are the latest builds of the plugins for Magellan. Your need Magellan to uses them. To install, call the installer with java -jar xyz-installer.jar and install into your Magellan directory.
        gzip: folders
        files: ${{ env.UPLOADS }}

