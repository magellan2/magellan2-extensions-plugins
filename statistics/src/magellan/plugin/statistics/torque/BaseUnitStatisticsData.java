package magellan.plugin.statistics.torque;


import java.math.BigDecimal;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.torque.TorqueException;
import org.apache.torque.map.TableMap;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;





/**
 * Contains informations about turn specific unit data
 *
 * This class was autogenerated by Torque on:
 *
 * [Thu May 22 14:33:00 CEST 2008]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to UnitStatisticsData
 */
public abstract class BaseUnitStatisticsData extends BaseObject
{
    /** Serial version */
    private static final long serialVersionUID = 1211459580847L;

    /** The Peer class */
    private static final UnitStatisticsDataPeer peer =
        new UnitStatisticsDataPeer();


    /** The value for the iD field */
    private long iD;

    /** The value for the unitId field */
    private long unitId;

    /** The value for the turn field */
    private int turn;

    /** The value for the name field */
    private String name;

    /** The value for the description field */
    private String description;

    /** The value for the persons field */
    private int persons;

    /** The value for the faction field */
    private String faction;

    /** The value for the region field */
    private String region;

    /** The value for the building field */
    private String building;

    /** The value for the ship field */
    private String ship;

    /** The value for the race field */
    private String race;

    /** The value for the weight field */
    private int weight;

    /** The value for the aura field */
    private int aura;

    /** The value for the health field */
    private String health;

    /** The value for the hero field */
    private boolean hero;

    /** The value for the guard field */
    private int guard;


    /**
     * Get the ID
     *
     * @return long
     */
    public long getID()
    {
        return iD;
    }


    /**
     * Set the value of ID
     *
     * @param v new value
     */
    public void setID(long v) throws TorqueException
    {

        if (this.iD != v)
        {
            this.iD = v;
            setModified(true);
        }



        // update associated UnitStatisticsSkillData
        if (collUnitStatisticsSkillDatas != null)
        {
            for (int i = 0; i < collUnitStatisticsSkillDatas.size(); i++)
            {
                ((UnitStatisticsSkillData) collUnitStatisticsSkillDatas.get(i))
                        .setTurnId(v);
            }
        }

        // update associated UnitStatisticsItemData
        if (collUnitStatisticsItemDatas != null)
        {
            for (int i = 0; i < collUnitStatisticsItemDatas.size(); i++)
            {
                ((UnitStatisticsItemData) collUnitStatisticsItemDatas.get(i))
                        .setTurnId(v);
            }
        }
    }

    /**
     * Get the UnitId
     *
     * @return long
     */
    public long getUnitId()
    {
        return unitId;
    }


    /**
     * Set the value of UnitId
     *
     * @param v new value
     */
    public void setUnitId(long v) throws TorqueException
    {

        if (this.unitId != v)
        {
            this.unitId = v;
            setModified(true);
        }


        if (aUnitStatistics != null && !(aUnitStatistics.getID() == v))
        {
            aUnitStatistics = null;
        }

    }

    /**
     * Get the Turn
     *
     * @return int
     */
    public int getTurn()
    {
        return turn;
    }


    /**
     * Set the value of Turn
     *
     * @param v new value
     */
    public void setTurn(int v) 
    {

        if (this.turn != v)
        {
            this.turn = v;
            setModified(true);
        }


    }

    /**
     * Get the Name
     *
     * @return String
     */
    public String getName()
    {
        return name;
    }


    /**
     * Set the value of Name
     *
     * @param v new value
     */
    public void setName(String v) 
    {

        if (!ObjectUtils.equals(this.name, v))
        {
            this.name = v;
            setModified(true);
        }


    }

    /**
     * Get the Description
     *
     * @return String
     */
    public String getDescription()
    {
        return description;
    }


    /**
     * Set the value of Description
     *
     * @param v new value
     */
    public void setDescription(String v) 
    {

        if (!ObjectUtils.equals(this.description, v))
        {
            this.description = v;
            setModified(true);
        }


    }

    /**
     * Get the Persons
     *
     * @return int
     */
    public int getPersons()
    {
        return persons;
    }


    /**
     * Set the value of Persons
     *
     * @param v new value
     */
    public void setPersons(int v) 
    {

        if (this.persons != v)
        {
            this.persons = v;
            setModified(true);
        }


    }

    /**
     * Get the Faction
     *
     * @return String
     */
    public String getFaction()
    {
        return faction;
    }


    /**
     * Set the value of Faction
     *
     * @param v new value
     */
    public void setFaction(String v) 
    {

        if (!ObjectUtils.equals(this.faction, v))
        {
            this.faction = v;
            setModified(true);
        }


    }

    /**
     * Get the Region
     *
     * @return String
     */
    public String getRegion()
    {
        return region;
    }


    /**
     * Set the value of Region
     *
     * @param v new value
     */
    public void setRegion(String v) 
    {

        if (!ObjectUtils.equals(this.region, v))
        {
            this.region = v;
            setModified(true);
        }


    }

    /**
     * Get the Building
     *
     * @return String
     */
    public String getBuilding()
    {
        return building;
    }


    /**
     * Set the value of Building
     *
     * @param v new value
     */
    public void setBuilding(String v) 
    {

        if (!ObjectUtils.equals(this.building, v))
        {
            this.building = v;
            setModified(true);
        }


    }

    /**
     * Get the Ship
     *
     * @return String
     */
    public String getShip()
    {
        return ship;
    }


    /**
     * Set the value of Ship
     *
     * @param v new value
     */
    public void setShip(String v) 
    {

        if (!ObjectUtils.equals(this.ship, v))
        {
            this.ship = v;
            setModified(true);
        }


    }

    /**
     * Get the Race
     *
     * @return String
     */
    public String getRace()
    {
        return race;
    }


    /**
     * Set the value of Race
     *
     * @param v new value
     */
    public void setRace(String v) 
    {

        if (!ObjectUtils.equals(this.race, v))
        {
            this.race = v;
            setModified(true);
        }


    }

    /**
     * Get the Weight
     *
     * @return int
     */
    public int getWeight()
    {
        return weight;
    }


    /**
     * Set the value of Weight
     *
     * @param v new value
     */
    public void setWeight(int v) 
    {

        if (this.weight != v)
        {
            this.weight = v;
            setModified(true);
        }


    }

    /**
     * Get the Aura
     *
     * @return int
     */
    public int getAura()
    {
        return aura;
    }


    /**
     * Set the value of Aura
     *
     * @param v new value
     */
    public void setAura(int v) 
    {

        if (this.aura != v)
        {
            this.aura = v;
            setModified(true);
        }


    }

    /**
     * Get the Health
     *
     * @return String
     */
    public String getHealth()
    {
        return health;
    }


    /**
     * Set the value of Health
     *
     * @param v new value
     */
    public void setHealth(String v) 
    {

        if (!ObjectUtils.equals(this.health, v))
        {
            this.health = v;
            setModified(true);
        }


    }

    /**
     * Get the Hero
     *
     * @return boolean
     */
    public boolean getHero()
    {
        return hero;
    }


    /**
     * Set the value of Hero
     *
     * @param v new value
     */
    public void setHero(boolean v) 
    {

        if (this.hero != v)
        {
            this.hero = v;
            setModified(true);
        }


    }

    /**
     * Get the Guard
     *
     * @return int
     */
    public int getGuard()
    {
        return guard;
    }


    /**
     * Set the value of Guard
     *
     * @param v new value
     */
    public void setGuard(int v) 
    {

        if (this.guard != v)
        {
            this.guard = v;
            setModified(true);
        }


    }

    



    private UnitStatistics aUnitStatistics;

    /**
     * Declares an association between this object and a UnitStatistics object
     *
     * @param v UnitStatistics
     * @throws TorqueException
     */
    public void setUnitStatistics(UnitStatistics v) throws TorqueException
    {
        if (v == null)
        {
            setUnitId( 0);
        }
        else
        {
            setUnitId(v.getID());
        }
        aUnitStatistics = v;
    }


    /**
     * Returns the associated UnitStatistics object.
     * If it was not retrieved before, the object is retrieved from
     * the database
     *
     * @return the associated UnitStatistics object
     * @throws TorqueException
     */
    public UnitStatistics getUnitStatistics()
        throws TorqueException
    {
        if (aUnitStatistics == null && (this.unitId != 0))
        {
            aUnitStatistics = UnitStatisticsPeer.retrieveByPK(SimpleKey.keyFor(this.unitId));
        }
        return aUnitStatistics;
    }

    /**
     * Return the associated UnitStatistics object
     * If it was not retrieved before, the object is retrieved from
     * the database using the passed connection
     *
     * @param connection the connection used to retrieve the associated object
     *        from the database, if it was not retrieved before
     * @return the associated UnitStatistics object
     * @throws TorqueException
     */
    public UnitStatistics getUnitStatistics(Connection connection)
        throws TorqueException
    {
        if (aUnitStatistics == null && (this.unitId != 0))
        {
            aUnitStatistics = UnitStatisticsPeer.retrieveByPK(SimpleKey.keyFor(this.unitId), connection);
        }
        return aUnitStatistics;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setUnitStatisticsKey(ObjectKey key) throws TorqueException
    {

        setUnitId(((NumberKey) key).longValue());
    }
   


    /**
     * Collection to store aggregation of collUnitStatisticsSkillDatas
     */
    protected List<UnitStatisticsSkillData> collUnitStatisticsSkillDatas;

    /**
     * Temporary storage of collUnitStatisticsSkillDatas to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initUnitStatisticsSkillDatas()
    {
        if (collUnitStatisticsSkillDatas == null)
        {
            collUnitStatisticsSkillDatas = new ArrayList<UnitStatisticsSkillData>();
        }
    }


    /**
     * Method called to associate a UnitStatisticsSkillData object to this object
     * through the UnitStatisticsSkillData foreign key attribute
     *
     * @param l UnitStatisticsSkillData
     * @throws TorqueException
     */
    public void addUnitStatisticsSkillData(UnitStatisticsSkillData l) throws TorqueException
    {
        getUnitStatisticsSkillDatas().add(l);
        l.setUnitStatisticsData((UnitStatisticsData) this);
    }

    /**
     * Method called to associate a UnitStatisticsSkillData object to this object
     * through the UnitStatisticsSkillData foreign key attribute using connection.
     *
     * @param l UnitStatisticsSkillData
     * @throws TorqueException
     */
    public void addUnitStatisticsSkillData(UnitStatisticsSkillData l, Connection con) throws TorqueException
    {
        getUnitStatisticsSkillDatas(con).add(l);
        l.setUnitStatisticsData((UnitStatisticsData) this);
    }

    /**
     * The criteria used to select the current contents of collUnitStatisticsSkillDatas
     */
    private Criteria lastUnitStatisticsSkillDatasCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getUnitStatisticsSkillDatas(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List<UnitStatisticsSkillData> getUnitStatisticsSkillDatas()
        throws TorqueException
    {
        if (collUnitStatisticsSkillDatas == null)
        {
            collUnitStatisticsSkillDatas = getUnitStatisticsSkillDatas(new Criteria(10));
        }
        return collUnitStatisticsSkillDatas;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this UnitStatisticsData has previously
     * been saved, it will retrieve related UnitStatisticsSkillDatas from storage.
     * If this UnitStatisticsData is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List<UnitStatisticsSkillData> getUnitStatisticsSkillDatas(Criteria criteria) throws TorqueException
    {
        if (collUnitStatisticsSkillDatas == null)
        {
            if (isNew())
            {
               collUnitStatisticsSkillDatas = new ArrayList<UnitStatisticsSkillData>();
            }
            else
            {
                criteria.add(UnitStatisticsSkillDataPeer.TURN_ID, getID() );
                collUnitStatisticsSkillDatas = UnitStatisticsSkillDataPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(UnitStatisticsSkillDataPeer.TURN_ID, getID());
                if (!lastUnitStatisticsSkillDatasCriteria.equals(criteria))
                {
                    collUnitStatisticsSkillDatas = UnitStatisticsSkillDataPeer.doSelect(criteria);
                }
            }
        }
        lastUnitStatisticsSkillDatasCriteria = criteria;

        return collUnitStatisticsSkillDatas;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getUnitStatisticsSkillDatas(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List<UnitStatisticsSkillData> getUnitStatisticsSkillDatas(Connection con) throws TorqueException
    {
        if (collUnitStatisticsSkillDatas == null)
        {
            collUnitStatisticsSkillDatas = getUnitStatisticsSkillDatas(new Criteria(10), con);
        }
        return collUnitStatisticsSkillDatas;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this UnitStatisticsData has previously
     * been saved, it will retrieve related UnitStatisticsSkillDatas from storage.
     * If this UnitStatisticsData is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List<UnitStatisticsSkillData> getUnitStatisticsSkillDatas(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collUnitStatisticsSkillDatas == null)
        {
            if (isNew())
            {
               collUnitStatisticsSkillDatas = new ArrayList<UnitStatisticsSkillData>();
            }
            else
            {
                 criteria.add(UnitStatisticsSkillDataPeer.TURN_ID, getID());
                 collUnitStatisticsSkillDatas = UnitStatisticsSkillDataPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(UnitStatisticsSkillDataPeer.TURN_ID, getID());
                 if (!lastUnitStatisticsSkillDatasCriteria.equals(criteria))
                 {
                     collUnitStatisticsSkillDatas = UnitStatisticsSkillDataPeer.doSelect(criteria, con);
                 }
             }
         }
         lastUnitStatisticsSkillDatasCriteria = criteria;

         return collUnitStatisticsSkillDatas;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this UnitStatisticsData is new, it will return
     * an empty collection; or if this UnitStatisticsData has previously
     * been saved, it will retrieve related UnitStatisticsSkillDatas from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in UnitStatisticsData.
     */
    protected List<UnitStatisticsSkillData> getUnitStatisticsSkillDatasJoinUnitStatisticsData(Criteria criteria)
        throws TorqueException
    {
        if (collUnitStatisticsSkillDatas == null)
        {
            if (isNew())
            {
               collUnitStatisticsSkillDatas = new ArrayList<UnitStatisticsSkillData>();
            }
            else
            {
                criteria.add(UnitStatisticsSkillDataPeer.TURN_ID, getID());
                collUnitStatisticsSkillDatas = UnitStatisticsSkillDataPeer.doSelectJoinUnitStatisticsData(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(UnitStatisticsSkillDataPeer.TURN_ID, getID());
            if (!lastUnitStatisticsSkillDatasCriteria.equals(criteria))
            {
                collUnitStatisticsSkillDatas = UnitStatisticsSkillDataPeer.doSelectJoinUnitStatisticsData(criteria);
            }
        }
        lastUnitStatisticsSkillDatasCriteria = criteria;

        return collUnitStatisticsSkillDatas;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this UnitStatisticsData is new, it will return
     * an empty collection; or if this UnitStatisticsData has previously
     * been saved, it will retrieve related UnitStatisticsSkillDatas from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in UnitStatisticsData.
     */
    protected List<UnitStatisticsSkillData> getUnitStatisticsSkillDatasJoinUnitStatistics(Criteria criteria)
        throws TorqueException
    {
        if (collUnitStatisticsSkillDatas == null)
        {
            if (isNew())
            {
               collUnitStatisticsSkillDatas = new ArrayList<UnitStatisticsSkillData>();
            }
            else
            {
                criteria.add(UnitStatisticsSkillDataPeer.TURN_ID, getID());
                collUnitStatisticsSkillDatas = UnitStatisticsSkillDataPeer.doSelectJoinUnitStatistics(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(UnitStatisticsSkillDataPeer.TURN_ID, getID());
            if (!lastUnitStatisticsSkillDatasCriteria.equals(criteria))
            {
                collUnitStatisticsSkillDatas = UnitStatisticsSkillDataPeer.doSelectJoinUnitStatistics(criteria);
            }
        }
        lastUnitStatisticsSkillDatasCriteria = criteria;

        return collUnitStatisticsSkillDatas;
    }





    /**
     * Collection to store aggregation of collUnitStatisticsItemDatas
     */
    protected List<UnitStatisticsItemData> collUnitStatisticsItemDatas;

    /**
     * Temporary storage of collUnitStatisticsItemDatas to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initUnitStatisticsItemDatas()
    {
        if (collUnitStatisticsItemDatas == null)
        {
            collUnitStatisticsItemDatas = new ArrayList<UnitStatisticsItemData>();
        }
    }


    /**
     * Method called to associate a UnitStatisticsItemData object to this object
     * through the UnitStatisticsItemData foreign key attribute
     *
     * @param l UnitStatisticsItemData
     * @throws TorqueException
     */
    public void addUnitStatisticsItemData(UnitStatisticsItemData l) throws TorqueException
    {
        getUnitStatisticsItemDatas().add(l);
        l.setUnitStatisticsData((UnitStatisticsData) this);
    }

    /**
     * Method called to associate a UnitStatisticsItemData object to this object
     * through the UnitStatisticsItemData foreign key attribute using connection.
     *
     * @param l UnitStatisticsItemData
     * @throws TorqueException
     */
    public void addUnitStatisticsItemData(UnitStatisticsItemData l, Connection con) throws TorqueException
    {
        getUnitStatisticsItemDatas(con).add(l);
        l.setUnitStatisticsData((UnitStatisticsData) this);
    }

    /**
     * The criteria used to select the current contents of collUnitStatisticsItemDatas
     */
    private Criteria lastUnitStatisticsItemDatasCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getUnitStatisticsItemDatas(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List<UnitStatisticsItemData> getUnitStatisticsItemDatas()
        throws TorqueException
    {
        if (collUnitStatisticsItemDatas == null)
        {
            collUnitStatisticsItemDatas = getUnitStatisticsItemDatas(new Criteria(10));
        }
        return collUnitStatisticsItemDatas;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this UnitStatisticsData has previously
     * been saved, it will retrieve related UnitStatisticsItemDatas from storage.
     * If this UnitStatisticsData is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List<UnitStatisticsItemData> getUnitStatisticsItemDatas(Criteria criteria) throws TorqueException
    {
        if (collUnitStatisticsItemDatas == null)
        {
            if (isNew())
            {
               collUnitStatisticsItemDatas = new ArrayList<UnitStatisticsItemData>();
            }
            else
            {
                criteria.add(UnitStatisticsItemDataPeer.TURN_ID, getID() );
                collUnitStatisticsItemDatas = UnitStatisticsItemDataPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(UnitStatisticsItemDataPeer.TURN_ID, getID());
                if (!lastUnitStatisticsItemDatasCriteria.equals(criteria))
                {
                    collUnitStatisticsItemDatas = UnitStatisticsItemDataPeer.doSelect(criteria);
                }
            }
        }
        lastUnitStatisticsItemDatasCriteria = criteria;

        return collUnitStatisticsItemDatas;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getUnitStatisticsItemDatas(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List<UnitStatisticsItemData> getUnitStatisticsItemDatas(Connection con) throws TorqueException
    {
        if (collUnitStatisticsItemDatas == null)
        {
            collUnitStatisticsItemDatas = getUnitStatisticsItemDatas(new Criteria(10), con);
        }
        return collUnitStatisticsItemDatas;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this UnitStatisticsData has previously
     * been saved, it will retrieve related UnitStatisticsItemDatas from storage.
     * If this UnitStatisticsData is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List<UnitStatisticsItemData> getUnitStatisticsItemDatas(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collUnitStatisticsItemDatas == null)
        {
            if (isNew())
            {
               collUnitStatisticsItemDatas = new ArrayList<UnitStatisticsItemData>();
            }
            else
            {
                 criteria.add(UnitStatisticsItemDataPeer.TURN_ID, getID());
                 collUnitStatisticsItemDatas = UnitStatisticsItemDataPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(UnitStatisticsItemDataPeer.TURN_ID, getID());
                 if (!lastUnitStatisticsItemDatasCriteria.equals(criteria))
                 {
                     collUnitStatisticsItemDatas = UnitStatisticsItemDataPeer.doSelect(criteria, con);
                 }
             }
         }
         lastUnitStatisticsItemDatasCriteria = criteria;

         return collUnitStatisticsItemDatas;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this UnitStatisticsData is new, it will return
     * an empty collection; or if this UnitStatisticsData has previously
     * been saved, it will retrieve related UnitStatisticsItemDatas from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in UnitStatisticsData.
     */
    protected List<UnitStatisticsItemData> getUnitStatisticsItemDatasJoinUnitStatisticsData(Criteria criteria)
        throws TorqueException
    {
        if (collUnitStatisticsItemDatas == null)
        {
            if (isNew())
            {
               collUnitStatisticsItemDatas = new ArrayList<UnitStatisticsItemData>();
            }
            else
            {
                criteria.add(UnitStatisticsItemDataPeer.TURN_ID, getID());
                collUnitStatisticsItemDatas = UnitStatisticsItemDataPeer.doSelectJoinUnitStatisticsData(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(UnitStatisticsItemDataPeer.TURN_ID, getID());
            if (!lastUnitStatisticsItemDatasCriteria.equals(criteria))
            {
                collUnitStatisticsItemDatas = UnitStatisticsItemDataPeer.doSelectJoinUnitStatisticsData(criteria);
            }
        }
        lastUnitStatisticsItemDatasCriteria = criteria;

        return collUnitStatisticsItemDatas;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this UnitStatisticsData is new, it will return
     * an empty collection; or if this UnitStatisticsData has previously
     * been saved, it will retrieve related UnitStatisticsItemDatas from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in UnitStatisticsData.
     */
    protected List<UnitStatisticsItemData> getUnitStatisticsItemDatasJoinUnitStatistics(Criteria criteria)
        throws TorqueException
    {
        if (collUnitStatisticsItemDatas == null)
        {
            if (isNew())
            {
               collUnitStatisticsItemDatas = new ArrayList<UnitStatisticsItemData>();
            }
            else
            {
                criteria.add(UnitStatisticsItemDataPeer.TURN_ID, getID());
                collUnitStatisticsItemDatas = UnitStatisticsItemDataPeer.doSelectJoinUnitStatistics(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(UnitStatisticsItemDataPeer.TURN_ID, getID());
            if (!lastUnitStatisticsItemDatasCriteria.equals(criteria))
            {
                collUnitStatisticsItemDatas = UnitStatisticsItemDataPeer.doSelectJoinUnitStatistics(criteria);
            }
        }
        lastUnitStatisticsItemDatasCriteria = criteria;

        return collUnitStatisticsItemDatas;
    }



        
    private static List<String> fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List<String> getFieldNames()
    {
        if (fieldNames == null)
        {
            fieldNames = new ArrayList<String>();
            fieldNames.add("ID");
            fieldNames.add("UnitId");
            fieldNames.add("Turn");
            fieldNames.add("Name");
            fieldNames.add("Description");
            fieldNames.add("Persons");
            fieldNames.add("Faction");
            fieldNames.add("Region");
            fieldNames.add("Building");
            fieldNames.add("Ship");
            fieldNames.add("Race");
            fieldNames.add("Weight");
            fieldNames.add("Aura");
            fieldNames.add("Health");
            fieldNames.add("Hero");
            fieldNames.add("Guard");
            fieldNames = Collections.unmodifiableList(fieldNames);
        }
        return fieldNames;
    }

    /**
     * Retrieves a field from the object by field (Java) name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
        if (name.equals("ID"))
        {
            return new Long(getID());
        }
        if (name.equals("UnitId"))
        {
            return new Long(getUnitId());
        }
        if (name.equals("Turn"))
        {
            return new Integer(getTurn());
        }
        if (name.equals("Name"))
        {
            return getName();
        }
        if (name.equals("Description"))
        {
            return getDescription();
        }
        if (name.equals("Persons"))
        {
            return new Integer(getPersons());
        }
        if (name.equals("Faction"))
        {
            return getFaction();
        }
        if (name.equals("Region"))
        {
            return getRegion();
        }
        if (name.equals("Building"))
        {
            return getBuilding();
        }
        if (name.equals("Ship"))
        {
            return getShip();
        }
        if (name.equals("Race"))
        {
            return getRace();
        }
        if (name.equals("Weight"))
        {
            return new Integer(getWeight());
        }
        if (name.equals("Aura"))
        {
            return new Integer(getAura());
        }
        if (name.equals("Health"))
        {
            return getHealth();
        }
        if (name.equals("Hero"))
        {
            return new Boolean(getHero());
        }
        if (name.equals("Guard"))
        {
            return new Integer(getGuard());
        }
        return null;
    }

    /**
     * Set a field in the object by field (Java) name.
     *
     * @param name field name
     * @param value field value
     * @return True if value was set, false if not (invalid name / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occurs with the set[Field] method.
     */
    public boolean setByName(String name, Object value )
        throws TorqueException, IllegalArgumentException
    {
        if (name.equals("ID"))
        {
            if (value == null || ! (Long.class.isInstance(value)))
            {
                throw new IllegalArgumentException("setByName: value parameter was null or not a Long object.");
            }
            setID(((Long) value).longValue());
            return true;
        }
        if (name.equals("UnitId"))
        {
            if (value == null || ! (Long.class.isInstance(value)))
            {
                throw new IllegalArgumentException("setByName: value parameter was null or not a Long object.");
            }
            setUnitId(((Long) value).longValue());
            return true;
        }
        if (name.equals("Turn"))
        {
            if (value == null || ! (Integer.class.isInstance(value)))
            {
                throw new IllegalArgumentException("setByName: value parameter was null or not an Integer object.");
            }
            setTurn(((Integer) value).intValue());
            return true;
        }
        if (name.equals("Name"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setName((String) value);
            return true;
        }
        if (name.equals("Description"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setDescription((String) value);
            return true;
        }
        if (name.equals("Persons"))
        {
            if (value == null || ! (Integer.class.isInstance(value)))
            {
                throw new IllegalArgumentException("setByName: value parameter was null or not an Integer object.");
            }
            setPersons(((Integer) value).intValue());
            return true;
        }
        if (name.equals("Faction"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setFaction((String) value);
            return true;
        }
        if (name.equals("Region"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setRegion((String) value);
            return true;
        }
        if (name.equals("Building"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setBuilding((String) value);
            return true;
        }
        if (name.equals("Ship"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setShip((String) value);
            return true;
        }
        if (name.equals("Race"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setRace((String) value);
            return true;
        }
        if (name.equals("Weight"))
        {
            if (value == null || ! (Integer.class.isInstance(value)))
            {
                throw new IllegalArgumentException("setByName: value parameter was null or not an Integer object.");
            }
            setWeight(((Integer) value).intValue());
            return true;
        }
        if (name.equals("Aura"))
        {
            if (value == null || ! (Integer.class.isInstance(value)))
            {
                throw new IllegalArgumentException("setByName: value parameter was null or not an Integer object.");
            }
            setAura(((Integer) value).intValue());
            return true;
        }
        if (name.equals("Health"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setHealth((String) value);
            return true;
        }
        if (name.equals("Hero"))
        {
            if (value == null || ! (Boolean.class.isInstance(value)))
            {
                throw new IllegalArgumentException("setByName: value parameter was null or not a Boolean object.");
            }
            setHero(((Boolean)value).booleanValue());
            return true;
        }
        if (name.equals("Guard"))
        {
            if (value == null || ! (Integer.class.isInstance(value)))
            {
                throw new IllegalArgumentException("setByName: value parameter was null or not an Integer object.");
            }
            setGuard(((Integer) value).intValue());
            return true;
        }
        return false;
    }

    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
        if (name.equals(UnitStatisticsDataPeer.ID))
        {
            return new Long(getID());
        }
        if (name.equals(UnitStatisticsDataPeer.UNIT_ID))
        {
            return new Long(getUnitId());
        }
        if (name.equals(UnitStatisticsDataPeer.TURN))
        {
            return new Integer(getTurn());
        }
        if (name.equals(UnitStatisticsDataPeer.NAME))
        {
            return getName();
        }
        if (name.equals(UnitStatisticsDataPeer.DESCRIPTION))
        {
            return getDescription();
        }
        if (name.equals(UnitStatisticsDataPeer.PERSONS))
        {
            return new Integer(getPersons());
        }
        if (name.equals(UnitStatisticsDataPeer.FACTION))
        {
            return getFaction();
        }
        if (name.equals(UnitStatisticsDataPeer.REGION))
        {
            return getRegion();
        }
        if (name.equals(UnitStatisticsDataPeer.BUILDING))
        {
            return getBuilding();
        }
        if (name.equals(UnitStatisticsDataPeer.SHIP))
        {
            return getShip();
        }
        if (name.equals(UnitStatisticsDataPeer.RACE))
        {
            return getRace();
        }
        if (name.equals(UnitStatisticsDataPeer.WEIGHT))
        {
            return new Integer(getWeight());
        }
        if (name.equals(UnitStatisticsDataPeer.AURA))
        {
            return new Integer(getAura());
        }
        if (name.equals(UnitStatisticsDataPeer.HEALTH))
        {
            return getHealth();
        }
        if (name.equals(UnitStatisticsDataPeer.HERO))
        {
            return new Boolean(getHero());
        }
        if (name.equals(UnitStatisticsDataPeer.GUARD))
        {
            return new Integer(getGuard());
        }
        return null;
    }

    /**
     * Set field values by Peer Field Name
     *
     * @param name field name
     * @param value field value
     * @return True if value was set, false if not (invalid name / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occurs with the set[Field] method.
     */
    public boolean setByPeerName(String name, Object value)
        throws TorqueException, IllegalArgumentException
    {
      if (UnitStatisticsDataPeer.ID.equals(name))
        {
            return setByName("ID", value);
        }
      if (UnitStatisticsDataPeer.UNIT_ID.equals(name))
        {
            return setByName("UnitId", value);
        }
      if (UnitStatisticsDataPeer.TURN.equals(name))
        {
            return setByName("Turn", value);
        }
      if (UnitStatisticsDataPeer.NAME.equals(name))
        {
            return setByName("Name", value);
        }
      if (UnitStatisticsDataPeer.DESCRIPTION.equals(name))
        {
            return setByName("Description", value);
        }
      if (UnitStatisticsDataPeer.PERSONS.equals(name))
        {
            return setByName("Persons", value);
        }
      if (UnitStatisticsDataPeer.FACTION.equals(name))
        {
            return setByName("Faction", value);
        }
      if (UnitStatisticsDataPeer.REGION.equals(name))
        {
            return setByName("Region", value);
        }
      if (UnitStatisticsDataPeer.BUILDING.equals(name))
        {
            return setByName("Building", value);
        }
      if (UnitStatisticsDataPeer.SHIP.equals(name))
        {
            return setByName("Ship", value);
        }
      if (UnitStatisticsDataPeer.RACE.equals(name))
        {
            return setByName("Race", value);
        }
      if (UnitStatisticsDataPeer.WEIGHT.equals(name))
        {
            return setByName("Weight", value);
        }
      if (UnitStatisticsDataPeer.AURA.equals(name))
        {
            return setByName("Aura", value);
        }
      if (UnitStatisticsDataPeer.HEALTH.equals(name))
        {
            return setByName("Health", value);
        }
      if (UnitStatisticsDataPeer.HERO.equals(name))
        {
            return setByName("Hero", value);
        }
      if (UnitStatisticsDataPeer.GUARD.equals(name))
        {
            return setByName("Guard", value);
        }
        return false;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
        if (pos == 0)
        {
            return new Long(getID());
        }
        if (pos == 1)
        {
            return new Long(getUnitId());
        }
        if (pos == 2)
        {
            return new Integer(getTurn());
        }
        if (pos == 3)
        {
            return getName();
        }
        if (pos == 4)
        {
            return getDescription();
        }
        if (pos == 5)
        {
            return new Integer(getPersons());
        }
        if (pos == 6)
        {
            return getFaction();
        }
        if (pos == 7)
        {
            return getRegion();
        }
        if (pos == 8)
        {
            return getBuilding();
        }
        if (pos == 9)
        {
            return getShip();
        }
        if (pos == 10)
        {
            return getRace();
        }
        if (pos == 11)
        {
            return new Integer(getWeight());
        }
        if (pos == 12)
        {
            return new Integer(getAura());
        }
        if (pos == 13)
        {
            return getHealth();
        }
        if (pos == 14)
        {
            return new Boolean(getHero());
        }
        if (pos == 15)
        {
            return new Integer(getGuard());
        }
        return null;
    }

    /**
     * Set field values by its position (zero based) in the XML schema.
     *
     * @param position The field position
     * @param value field value
     * @return True if value was set, false if not (invalid position / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occurs with the set[Field] method.
     */
    public boolean setByPosition(int position, Object value)
        throws TorqueException, IllegalArgumentException
    {
    if (position == 0)
        {
            return setByName("ID", value);
        }
    if (position == 1)
        {
            return setByName("UnitId", value);
        }
    if (position == 2)
        {
            return setByName("Turn", value);
        }
    if (position == 3)
        {
            return setByName("Name", value);
        }
    if (position == 4)
        {
            return setByName("Description", value);
        }
    if (position == 5)
        {
            return setByName("Persons", value);
        }
    if (position == 6)
        {
            return setByName("Faction", value);
        }
    if (position == 7)
        {
            return setByName("Region", value);
        }
    if (position == 8)
        {
            return setByName("Building", value);
        }
    if (position == 9)
        {
            return setByName("Ship", value);
        }
    if (position == 10)
        {
            return setByName("Race", value);
        }
    if (position == 11)
        {
            return setByName("Weight", value);
        }
    if (position == 12)
        {
            return setByName("Aura", value);
        }
    if (position == 13)
        {
            return setByName("Health", value);
        }
    if (position == 14)
        {
            return setByName("Hero", value);
        }
    if (position == 15)
        {
            return setByName("Guard", value);
        }
        return false;
    }
     
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
        save(UnitStatisticsDataPeer.DATABASE_NAME);
    }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
     *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
        try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }
    }

    /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
        if (!alreadyInSave)
        {
            alreadyInSave = true;



            // If this object has been modified, then save it to the database.
            if (isModified())
            {
                if (isNew())
                {
                    UnitStatisticsDataPeer.doInsert((UnitStatisticsData) this, con);
                    setNew(false);
                }
                else
                {
                    UnitStatisticsDataPeer.doUpdate((UnitStatisticsData) this, con);
                }
            }


            if (collUnitStatisticsSkillDatas != null)
            {
                for (int i = 0; i < collUnitStatisticsSkillDatas.size(); i++)
                {
                    ((UnitStatisticsSkillData) collUnitStatisticsSkillDatas.get(i)).save(con);
                }
            }

            if (collUnitStatisticsItemDatas != null)
            {
                for (int i = 0; i < collUnitStatisticsItemDatas.size(); i++)
                {
                    ((UnitStatisticsItemData) collUnitStatisticsItemDatas.get(i)).save(con);
                }
            }
            alreadyInSave = false;
        }
    }


    /**
     * Set the PrimaryKey using ObjectKey.
     *
     * @param key iD ObjectKey
     */
    public void setPrimaryKey(ObjectKey key)
        throws TorqueException
    {
        setID(((NumberKey) key).longValue());
    }

    /**
     * Set the PrimaryKey using a String.
     *
     * @param key
     */
    public void setPrimaryKey(String key) throws TorqueException
    {
        setID(Long.parseLong(key));
    }


    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
        return SimpleKey.keyFor(getID());
    }
 

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     */
    public UnitStatisticsData copy() throws TorqueException
    {
        return copy(true);
    }

    /**
     * Makes a copy of this object using connection.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     *
     * @param con the database connection to read associated objects.
     */
    public UnitStatisticsData copy(Connection con) throws TorqueException
    {
        return copy(true, con);
    }

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * If the parameter deepcopy is true, it then fills all the
     * association collections and sets the related objects to
     * isNew=true.
     *
     * @param deepcopy whether to copy the associated objects.
     */
    public UnitStatisticsData copy(boolean deepcopy) throws TorqueException
    {
        return copyInto(new UnitStatisticsData(), deepcopy);
    }

    /**
     * Makes a copy of this object using connection.
     * It creates a new object filling in the simple attributes.
     * If the parameter deepcopy is true, it then fills all the
     * association collections and sets the related objects to
     * isNew=true.
     *
     * @param deepcopy whether to copy the associated objects.
     * @param con the database connection to read associated objects.
     */
    public UnitStatisticsData copy(boolean deepcopy, Connection con) throws TorqueException
    {
        return copyInto(new UnitStatisticsData(), deepcopy, con);
    }
  
    /**
     * Fills the copyObj with the contents of this object.
     * The associated objects are also copied and treated as new objects.
     *
     * @param copyObj the object to fill.
     */
    protected UnitStatisticsData copyInto(UnitStatisticsData copyObj) throws TorqueException
    {
        return copyInto(copyObj, true);
    }

  
    /**
     * Fills the copyObj with the contents of this object using connection.
     * The associated objects are also copied and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @param con the database connection to read associated objects.
     */
    protected UnitStatisticsData copyInto(UnitStatisticsData copyObj, Connection con) throws TorqueException
    {
        return copyInto(copyObj, true, con);
    }
  
    /**
     * Fills the copyObj with the contents of this object.
     * If deepcopy is true, The associated objects are also copied
     * and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @param deepcopy whether the associated objects should be copied.
     */
    protected UnitStatisticsData copyInto(UnitStatisticsData copyObj, boolean deepcopy) throws TorqueException
    {
        copyObj.setID(iD);
        copyObj.setUnitId(unitId);
        copyObj.setTurn(turn);
        copyObj.setName(name);
        copyObj.setDescription(description);
        copyObj.setPersons(persons);
        copyObj.setFaction(faction);
        copyObj.setRegion(region);
        copyObj.setBuilding(building);
        copyObj.setShip(ship);
        copyObj.setRace(race);
        copyObj.setWeight(weight);
        copyObj.setAura(aura);
        copyObj.setHealth(health);
        copyObj.setHero(hero);
        copyObj.setGuard(guard);

        copyObj.setID( 0);

        if (deepcopy)
        {


        List<UnitStatisticsSkillData> vUnitStatisticsSkillDatas = getUnitStatisticsSkillDatas();
        if (vUnitStatisticsSkillDatas != null)
        {
            for (int i = 0; i < vUnitStatisticsSkillDatas.size(); i++)
            {
                UnitStatisticsSkillData obj =  vUnitStatisticsSkillDatas.get(i);
                copyObj.addUnitStatisticsSkillData(obj.copy());
            }
        }
        else
        {
            copyObj.collUnitStatisticsSkillDatas = null;
        }


        List<UnitStatisticsItemData> vUnitStatisticsItemDatas = getUnitStatisticsItemDatas();
        if (vUnitStatisticsItemDatas != null)
        {
            for (int i = 0; i < vUnitStatisticsItemDatas.size(); i++)
            {
                UnitStatisticsItemData obj =  vUnitStatisticsItemDatas.get(i);
                copyObj.addUnitStatisticsItemData(obj.copy());
            }
        }
        else
        {
            copyObj.collUnitStatisticsItemDatas = null;
        }
        }
        return copyObj;
    }
        
    
    /**
     * Fills the copyObj with the contents of this object using connection.
     * If deepcopy is true, The associated objects are also copied
     * and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @param deepcopy whether the associated objects should be copied.
     * @param con the database connection to read associated objects.
     */
    protected UnitStatisticsData copyInto(UnitStatisticsData copyObj, boolean deepcopy, Connection con) throws TorqueException
    {
        copyObj.setID(iD);
        copyObj.setUnitId(unitId);
        copyObj.setTurn(turn);
        copyObj.setName(name);
        copyObj.setDescription(description);
        copyObj.setPersons(persons);
        copyObj.setFaction(faction);
        copyObj.setRegion(region);
        copyObj.setBuilding(building);
        copyObj.setShip(ship);
        copyObj.setRace(race);
        copyObj.setWeight(weight);
        copyObj.setAura(aura);
        copyObj.setHealth(health);
        copyObj.setHero(hero);
        copyObj.setGuard(guard);

        copyObj.setID( 0);

        if (deepcopy)
        {


        List<UnitStatisticsSkillData> vUnitStatisticsSkillDatas = getUnitStatisticsSkillDatas(con);
        if (vUnitStatisticsSkillDatas != null)
        {
            for (int i = 0; i < vUnitStatisticsSkillDatas.size(); i++)
            {
                UnitStatisticsSkillData obj =  vUnitStatisticsSkillDatas.get(i);
                copyObj.addUnitStatisticsSkillData(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collUnitStatisticsSkillDatas = null;
        }


        List<UnitStatisticsItemData> vUnitStatisticsItemDatas = getUnitStatisticsItemDatas(con);
        if (vUnitStatisticsItemDatas != null)
        {
            for (int i = 0; i < vUnitStatisticsItemDatas.size(); i++)
            {
                UnitStatisticsItemData obj =  vUnitStatisticsItemDatas.get(i);
                copyObj.addUnitStatisticsItemData(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collUnitStatisticsItemDatas = null;
        }
        }
        return copyObj;
    }
    
    

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public UnitStatisticsDataPeer getPeer()
    {
        return peer;
    }

    /**
     * Retrieves the TableMap object related to this Table data without
     * compiler warnings of using getPeer().getTableMap().
     *
     * @return The associated TableMap object.
     */
    public TableMap getTableMap() throws TorqueException
    {
        return UnitStatisticsDataPeer.getTableMap();
    }


    public String toString()
    {
        StringBuffer str = new StringBuffer();
        str.append("UnitStatisticsData:\n");
        str.append("ID = ")
           .append(getID())
           .append("\n");
        str.append("UnitId = ")
           .append(getUnitId())
           .append("\n");
        str.append("Turn = ")
           .append(getTurn())
           .append("\n");
        str.append("Name = ")
           .append(getName())
           .append("\n");
        str.append("Description = ")
           .append(getDescription())
           .append("\n");
        str.append("Persons = ")
           .append(getPersons())
           .append("\n");
        str.append("Faction = ")
           .append(getFaction())
           .append("\n");
        str.append("Region = ")
           .append(getRegion())
           .append("\n");
        str.append("Building = ")
           .append(getBuilding())
           .append("\n");
        str.append("Ship = ")
           .append(getShip())
           .append("\n");
        str.append("Race = ")
           .append(getRace())
           .append("\n");
        str.append("Weight = ")
           .append(getWeight())
           .append("\n");
        str.append("Aura = ")
           .append(getAura())
           .append("\n");
        str.append("Health = ")
           .append(getHealth())
           .append("\n");
        str.append("Hero = ")
           .append(getHero())
           .append("\n");
        str.append("Guard = ")
           .append(getGuard())
           .append("\n");
        return(str.toString());
    }
}
