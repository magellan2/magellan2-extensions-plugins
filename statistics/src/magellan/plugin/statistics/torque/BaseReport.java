package magellan.plugin.statistics.torque;


import java.math.BigDecimal;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.torque.TorqueException;
import org.apache.torque.map.TableMap;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;





/**
 * Contains informations about a computer reports
 *
 * This class was autogenerated by Torque on:
 *
 * [Thu May 22 14:33:00 CEST 2008]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to Report
 */
public abstract class BaseReport extends BaseObject
{
    /** Serial version */
    private static final long serialVersionUID = 1211459580847L;

    /** The Peer class */
    private static final ReportPeer peer =
        new ReportPeer();


    /** The value for the iD field */
    private long iD;

    /** The value for the filename field */
    private String filename;


    /**
     * Get the ID
     *
     * @return long
     */
    public long getID()
    {
        return iD;
    }


    /**
     * Set the value of ID
     *
     * @param v new value
     */
    public void setID(long v) throws TorqueException
    {

        if (this.iD != v)
        {
            this.iD = v;
            setModified(true);
        }



        // update associated BuildingStatistics
        if (collBuildingStatisticss != null)
        {
            for (int i = 0; i < collBuildingStatisticss.size(); i++)
            {
                ((BuildingStatistics) collBuildingStatisticss.get(i))
                        .setReportId(v);
            }
        }

        // update associated FactionStatistics
        if (collFactionStatisticss != null)
        {
            for (int i = 0; i < collFactionStatisticss.size(); i++)
            {
                ((FactionStatistics) collFactionStatisticss.get(i))
                        .setReportId(v);
            }
        }

        // update associated ShipStatistics
        if (collShipStatisticss != null)
        {
            for (int i = 0; i < collShipStatisticss.size(); i++)
            {
                ((ShipStatistics) collShipStatisticss.get(i))
                        .setReportId(v);
            }
        }

        // update associated RegionStatistics
        if (collRegionStatisticss != null)
        {
            for (int i = 0; i < collRegionStatisticss.size(); i++)
            {
                ((RegionStatistics) collRegionStatisticss.get(i))
                        .setReportId(v);
            }
        }

        // update associated UnitStatistics
        if (collUnitStatisticss != null)
        {
            for (int i = 0; i < collUnitStatisticss.size(); i++)
            {
                ((UnitStatistics) collUnitStatisticss.get(i))
                        .setReportId(v);
            }
        }
    }

    /**
     * Get the Filename
     *
     * @return String
     */
    public String getFilename()
    {
        return filename;
    }


    /**
     * Set the value of Filename
     *
     * @param v new value
     */
    public void setFilename(String v) 
    {

        if (!ObjectUtils.equals(this.filename, v))
        {
            this.filename = v;
            setModified(true);
        }


    }

       


    /**
     * Collection to store aggregation of collBuildingStatisticss
     */
    protected List<BuildingStatistics> collBuildingStatisticss;

    /**
     * Temporary storage of collBuildingStatisticss to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initBuildingStatisticss()
    {
        if (collBuildingStatisticss == null)
        {
            collBuildingStatisticss = new ArrayList<BuildingStatistics>();
        }
    }


    /**
     * Method called to associate a BuildingStatistics object to this object
     * through the BuildingStatistics foreign key attribute
     *
     * @param l BuildingStatistics
     * @throws TorqueException
     */
    public void addBuildingStatistics(BuildingStatistics l) throws TorqueException
    {
        getBuildingStatisticss().add(l);
        l.setReport((Report) this);
    }

    /**
     * Method called to associate a BuildingStatistics object to this object
     * through the BuildingStatistics foreign key attribute using connection.
     *
     * @param l BuildingStatistics
     * @throws TorqueException
     */
    public void addBuildingStatistics(BuildingStatistics l, Connection con) throws TorqueException
    {
        getBuildingStatisticss(con).add(l);
        l.setReport((Report) this);
    }

    /**
     * The criteria used to select the current contents of collBuildingStatisticss
     */
    private Criteria lastBuildingStatisticssCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getBuildingStatisticss(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List<BuildingStatistics> getBuildingStatisticss()
        throws TorqueException
    {
        if (collBuildingStatisticss == null)
        {
            collBuildingStatisticss = getBuildingStatisticss(new Criteria(10));
        }
        return collBuildingStatisticss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Report has previously
     * been saved, it will retrieve related BuildingStatisticss from storage.
     * If this Report is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List<BuildingStatistics> getBuildingStatisticss(Criteria criteria) throws TorqueException
    {
        if (collBuildingStatisticss == null)
        {
            if (isNew())
            {
               collBuildingStatisticss = new ArrayList<BuildingStatistics>();
            }
            else
            {
                criteria.add(BuildingStatisticsPeer.REPORT_ID, getID() );
                collBuildingStatisticss = BuildingStatisticsPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(BuildingStatisticsPeer.REPORT_ID, getID());
                if (!lastBuildingStatisticssCriteria.equals(criteria))
                {
                    collBuildingStatisticss = BuildingStatisticsPeer.doSelect(criteria);
                }
            }
        }
        lastBuildingStatisticssCriteria = criteria;

        return collBuildingStatisticss;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getBuildingStatisticss(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List<BuildingStatistics> getBuildingStatisticss(Connection con) throws TorqueException
    {
        if (collBuildingStatisticss == null)
        {
            collBuildingStatisticss = getBuildingStatisticss(new Criteria(10), con);
        }
        return collBuildingStatisticss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Report has previously
     * been saved, it will retrieve related BuildingStatisticss from storage.
     * If this Report is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List<BuildingStatistics> getBuildingStatisticss(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collBuildingStatisticss == null)
        {
            if (isNew())
            {
               collBuildingStatisticss = new ArrayList<BuildingStatistics>();
            }
            else
            {
                 criteria.add(BuildingStatisticsPeer.REPORT_ID, getID());
                 collBuildingStatisticss = BuildingStatisticsPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(BuildingStatisticsPeer.REPORT_ID, getID());
                 if (!lastBuildingStatisticssCriteria.equals(criteria))
                 {
                     collBuildingStatisticss = BuildingStatisticsPeer.doSelect(criteria, con);
                 }
             }
         }
         lastBuildingStatisticssCriteria = criteria;

         return collBuildingStatisticss;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Report is new, it will return
     * an empty collection; or if this Report has previously
     * been saved, it will retrieve related BuildingStatisticss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Report.
     */
    protected List<BuildingStatistics> getBuildingStatisticssJoinReport(Criteria criteria)
        throws TorqueException
    {
        if (collBuildingStatisticss == null)
        {
            if (isNew())
            {
               collBuildingStatisticss = new ArrayList<BuildingStatistics>();
            }
            else
            {
                criteria.add(BuildingStatisticsPeer.REPORT_ID, getID());
                collBuildingStatisticss = BuildingStatisticsPeer.doSelectJoinReport(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(BuildingStatisticsPeer.REPORT_ID, getID());
            if (!lastBuildingStatisticssCriteria.equals(criteria))
            {
                collBuildingStatisticss = BuildingStatisticsPeer.doSelectJoinReport(criteria);
            }
        }
        lastBuildingStatisticssCriteria = criteria;

        return collBuildingStatisticss;
    }





    /**
     * Collection to store aggregation of collFactionStatisticss
     */
    protected List<FactionStatistics> collFactionStatisticss;

    /**
     * Temporary storage of collFactionStatisticss to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initFactionStatisticss()
    {
        if (collFactionStatisticss == null)
        {
            collFactionStatisticss = new ArrayList<FactionStatistics>();
        }
    }


    /**
     * Method called to associate a FactionStatistics object to this object
     * through the FactionStatistics foreign key attribute
     *
     * @param l FactionStatistics
     * @throws TorqueException
     */
    public void addFactionStatistics(FactionStatistics l) throws TorqueException
    {
        getFactionStatisticss().add(l);
        l.setReport((Report) this);
    }

    /**
     * Method called to associate a FactionStatistics object to this object
     * through the FactionStatistics foreign key attribute using connection.
     *
     * @param l FactionStatistics
     * @throws TorqueException
     */
    public void addFactionStatistics(FactionStatistics l, Connection con) throws TorqueException
    {
        getFactionStatisticss(con).add(l);
        l.setReport((Report) this);
    }

    /**
     * The criteria used to select the current contents of collFactionStatisticss
     */
    private Criteria lastFactionStatisticssCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getFactionStatisticss(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List<FactionStatistics> getFactionStatisticss()
        throws TorqueException
    {
        if (collFactionStatisticss == null)
        {
            collFactionStatisticss = getFactionStatisticss(new Criteria(10));
        }
        return collFactionStatisticss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Report has previously
     * been saved, it will retrieve related FactionStatisticss from storage.
     * If this Report is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List<FactionStatistics> getFactionStatisticss(Criteria criteria) throws TorqueException
    {
        if (collFactionStatisticss == null)
        {
            if (isNew())
            {
               collFactionStatisticss = new ArrayList<FactionStatistics>();
            }
            else
            {
                criteria.add(FactionStatisticsPeer.REPORT_ID, getID() );
                collFactionStatisticss = FactionStatisticsPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(FactionStatisticsPeer.REPORT_ID, getID());
                if (!lastFactionStatisticssCriteria.equals(criteria))
                {
                    collFactionStatisticss = FactionStatisticsPeer.doSelect(criteria);
                }
            }
        }
        lastFactionStatisticssCriteria = criteria;

        return collFactionStatisticss;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getFactionStatisticss(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List<FactionStatistics> getFactionStatisticss(Connection con) throws TorqueException
    {
        if (collFactionStatisticss == null)
        {
            collFactionStatisticss = getFactionStatisticss(new Criteria(10), con);
        }
        return collFactionStatisticss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Report has previously
     * been saved, it will retrieve related FactionStatisticss from storage.
     * If this Report is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List<FactionStatistics> getFactionStatisticss(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collFactionStatisticss == null)
        {
            if (isNew())
            {
               collFactionStatisticss = new ArrayList<FactionStatistics>();
            }
            else
            {
                 criteria.add(FactionStatisticsPeer.REPORT_ID, getID());
                 collFactionStatisticss = FactionStatisticsPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(FactionStatisticsPeer.REPORT_ID, getID());
                 if (!lastFactionStatisticssCriteria.equals(criteria))
                 {
                     collFactionStatisticss = FactionStatisticsPeer.doSelect(criteria, con);
                 }
             }
         }
         lastFactionStatisticssCriteria = criteria;

         return collFactionStatisticss;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Report is new, it will return
     * an empty collection; or if this Report has previously
     * been saved, it will retrieve related FactionStatisticss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Report.
     */
    protected List<FactionStatistics> getFactionStatisticssJoinReport(Criteria criteria)
        throws TorqueException
    {
        if (collFactionStatisticss == null)
        {
            if (isNew())
            {
               collFactionStatisticss = new ArrayList<FactionStatistics>();
            }
            else
            {
                criteria.add(FactionStatisticsPeer.REPORT_ID, getID());
                collFactionStatisticss = FactionStatisticsPeer.doSelectJoinReport(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(FactionStatisticsPeer.REPORT_ID, getID());
            if (!lastFactionStatisticssCriteria.equals(criteria))
            {
                collFactionStatisticss = FactionStatisticsPeer.doSelectJoinReport(criteria);
            }
        }
        lastFactionStatisticssCriteria = criteria;

        return collFactionStatisticss;
    }





    /**
     * Collection to store aggregation of collShipStatisticss
     */
    protected List<ShipStatistics> collShipStatisticss;

    /**
     * Temporary storage of collShipStatisticss to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initShipStatisticss()
    {
        if (collShipStatisticss == null)
        {
            collShipStatisticss = new ArrayList<ShipStatistics>();
        }
    }


    /**
     * Method called to associate a ShipStatistics object to this object
     * through the ShipStatistics foreign key attribute
     *
     * @param l ShipStatistics
     * @throws TorqueException
     */
    public void addShipStatistics(ShipStatistics l) throws TorqueException
    {
        getShipStatisticss().add(l);
        l.setReport((Report) this);
    }

    /**
     * Method called to associate a ShipStatistics object to this object
     * through the ShipStatistics foreign key attribute using connection.
     *
     * @param l ShipStatistics
     * @throws TorqueException
     */
    public void addShipStatistics(ShipStatistics l, Connection con) throws TorqueException
    {
        getShipStatisticss(con).add(l);
        l.setReport((Report) this);
    }

    /**
     * The criteria used to select the current contents of collShipStatisticss
     */
    private Criteria lastShipStatisticssCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getShipStatisticss(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List<ShipStatistics> getShipStatisticss()
        throws TorqueException
    {
        if (collShipStatisticss == null)
        {
            collShipStatisticss = getShipStatisticss(new Criteria(10));
        }
        return collShipStatisticss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Report has previously
     * been saved, it will retrieve related ShipStatisticss from storage.
     * If this Report is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List<ShipStatistics> getShipStatisticss(Criteria criteria) throws TorqueException
    {
        if (collShipStatisticss == null)
        {
            if (isNew())
            {
               collShipStatisticss = new ArrayList<ShipStatistics>();
            }
            else
            {
                criteria.add(ShipStatisticsPeer.REPORT_ID, getID() );
                collShipStatisticss = ShipStatisticsPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(ShipStatisticsPeer.REPORT_ID, getID());
                if (!lastShipStatisticssCriteria.equals(criteria))
                {
                    collShipStatisticss = ShipStatisticsPeer.doSelect(criteria);
                }
            }
        }
        lastShipStatisticssCriteria = criteria;

        return collShipStatisticss;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getShipStatisticss(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List<ShipStatistics> getShipStatisticss(Connection con) throws TorqueException
    {
        if (collShipStatisticss == null)
        {
            collShipStatisticss = getShipStatisticss(new Criteria(10), con);
        }
        return collShipStatisticss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Report has previously
     * been saved, it will retrieve related ShipStatisticss from storage.
     * If this Report is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List<ShipStatistics> getShipStatisticss(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collShipStatisticss == null)
        {
            if (isNew())
            {
               collShipStatisticss = new ArrayList<ShipStatistics>();
            }
            else
            {
                 criteria.add(ShipStatisticsPeer.REPORT_ID, getID());
                 collShipStatisticss = ShipStatisticsPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(ShipStatisticsPeer.REPORT_ID, getID());
                 if (!lastShipStatisticssCriteria.equals(criteria))
                 {
                     collShipStatisticss = ShipStatisticsPeer.doSelect(criteria, con);
                 }
             }
         }
         lastShipStatisticssCriteria = criteria;

         return collShipStatisticss;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Report is new, it will return
     * an empty collection; or if this Report has previously
     * been saved, it will retrieve related ShipStatisticss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Report.
     */
    protected List<ShipStatistics> getShipStatisticssJoinReport(Criteria criteria)
        throws TorqueException
    {
        if (collShipStatisticss == null)
        {
            if (isNew())
            {
               collShipStatisticss = new ArrayList<ShipStatistics>();
            }
            else
            {
                criteria.add(ShipStatisticsPeer.REPORT_ID, getID());
                collShipStatisticss = ShipStatisticsPeer.doSelectJoinReport(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(ShipStatisticsPeer.REPORT_ID, getID());
            if (!lastShipStatisticssCriteria.equals(criteria))
            {
                collShipStatisticss = ShipStatisticsPeer.doSelectJoinReport(criteria);
            }
        }
        lastShipStatisticssCriteria = criteria;

        return collShipStatisticss;
    }





    /**
     * Collection to store aggregation of collRegionStatisticss
     */
    protected List<RegionStatistics> collRegionStatisticss;

    /**
     * Temporary storage of collRegionStatisticss to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initRegionStatisticss()
    {
        if (collRegionStatisticss == null)
        {
            collRegionStatisticss = new ArrayList<RegionStatistics>();
        }
    }


    /**
     * Method called to associate a RegionStatistics object to this object
     * through the RegionStatistics foreign key attribute
     *
     * @param l RegionStatistics
     * @throws TorqueException
     */
    public void addRegionStatistics(RegionStatistics l) throws TorqueException
    {
        getRegionStatisticss().add(l);
        l.setReport((Report) this);
    }

    /**
     * Method called to associate a RegionStatistics object to this object
     * through the RegionStatistics foreign key attribute using connection.
     *
     * @param l RegionStatistics
     * @throws TorqueException
     */
    public void addRegionStatistics(RegionStatistics l, Connection con) throws TorqueException
    {
        getRegionStatisticss(con).add(l);
        l.setReport((Report) this);
    }

    /**
     * The criteria used to select the current contents of collRegionStatisticss
     */
    private Criteria lastRegionStatisticssCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getRegionStatisticss(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List<RegionStatistics> getRegionStatisticss()
        throws TorqueException
    {
        if (collRegionStatisticss == null)
        {
            collRegionStatisticss = getRegionStatisticss(new Criteria(10));
        }
        return collRegionStatisticss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Report has previously
     * been saved, it will retrieve related RegionStatisticss from storage.
     * If this Report is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List<RegionStatistics> getRegionStatisticss(Criteria criteria) throws TorqueException
    {
        if (collRegionStatisticss == null)
        {
            if (isNew())
            {
               collRegionStatisticss = new ArrayList<RegionStatistics>();
            }
            else
            {
                criteria.add(RegionStatisticsPeer.REPORT_ID, getID() );
                collRegionStatisticss = RegionStatisticsPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(RegionStatisticsPeer.REPORT_ID, getID());
                if (!lastRegionStatisticssCriteria.equals(criteria))
                {
                    collRegionStatisticss = RegionStatisticsPeer.doSelect(criteria);
                }
            }
        }
        lastRegionStatisticssCriteria = criteria;

        return collRegionStatisticss;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getRegionStatisticss(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List<RegionStatistics> getRegionStatisticss(Connection con) throws TorqueException
    {
        if (collRegionStatisticss == null)
        {
            collRegionStatisticss = getRegionStatisticss(new Criteria(10), con);
        }
        return collRegionStatisticss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Report has previously
     * been saved, it will retrieve related RegionStatisticss from storage.
     * If this Report is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List<RegionStatistics> getRegionStatisticss(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collRegionStatisticss == null)
        {
            if (isNew())
            {
               collRegionStatisticss = new ArrayList<RegionStatistics>();
            }
            else
            {
                 criteria.add(RegionStatisticsPeer.REPORT_ID, getID());
                 collRegionStatisticss = RegionStatisticsPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(RegionStatisticsPeer.REPORT_ID, getID());
                 if (!lastRegionStatisticssCriteria.equals(criteria))
                 {
                     collRegionStatisticss = RegionStatisticsPeer.doSelect(criteria, con);
                 }
             }
         }
         lastRegionStatisticssCriteria = criteria;

         return collRegionStatisticss;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Report is new, it will return
     * an empty collection; or if this Report has previously
     * been saved, it will retrieve related RegionStatisticss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Report.
     */
    protected List<RegionStatistics> getRegionStatisticssJoinReport(Criteria criteria)
        throws TorqueException
    {
        if (collRegionStatisticss == null)
        {
            if (isNew())
            {
               collRegionStatisticss = new ArrayList<RegionStatistics>();
            }
            else
            {
                criteria.add(RegionStatisticsPeer.REPORT_ID, getID());
                collRegionStatisticss = RegionStatisticsPeer.doSelectJoinReport(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(RegionStatisticsPeer.REPORT_ID, getID());
            if (!lastRegionStatisticssCriteria.equals(criteria))
            {
                collRegionStatisticss = RegionStatisticsPeer.doSelectJoinReport(criteria);
            }
        }
        lastRegionStatisticssCriteria = criteria;

        return collRegionStatisticss;
    }





    /**
     * Collection to store aggregation of collUnitStatisticss
     */
    protected List<UnitStatistics> collUnitStatisticss;

    /**
     * Temporary storage of collUnitStatisticss to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initUnitStatisticss()
    {
        if (collUnitStatisticss == null)
        {
            collUnitStatisticss = new ArrayList<UnitStatistics>();
        }
    }


    /**
     * Method called to associate a UnitStatistics object to this object
     * through the UnitStatistics foreign key attribute
     *
     * @param l UnitStatistics
     * @throws TorqueException
     */
    public void addUnitStatistics(UnitStatistics l) throws TorqueException
    {
        getUnitStatisticss().add(l);
        l.setReport((Report) this);
    }

    /**
     * Method called to associate a UnitStatistics object to this object
     * through the UnitStatistics foreign key attribute using connection.
     *
     * @param l UnitStatistics
     * @throws TorqueException
     */
    public void addUnitStatistics(UnitStatistics l, Connection con) throws TorqueException
    {
        getUnitStatisticss(con).add(l);
        l.setReport((Report) this);
    }

    /**
     * The criteria used to select the current contents of collUnitStatisticss
     */
    private Criteria lastUnitStatisticssCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getUnitStatisticss(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List<UnitStatistics> getUnitStatisticss()
        throws TorqueException
    {
        if (collUnitStatisticss == null)
        {
            collUnitStatisticss = getUnitStatisticss(new Criteria(10));
        }
        return collUnitStatisticss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Report has previously
     * been saved, it will retrieve related UnitStatisticss from storage.
     * If this Report is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List<UnitStatistics> getUnitStatisticss(Criteria criteria) throws TorqueException
    {
        if (collUnitStatisticss == null)
        {
            if (isNew())
            {
               collUnitStatisticss = new ArrayList<UnitStatistics>();
            }
            else
            {
                criteria.add(UnitStatisticsPeer.REPORT_ID, getID() );
                collUnitStatisticss = UnitStatisticsPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(UnitStatisticsPeer.REPORT_ID, getID());
                if (!lastUnitStatisticssCriteria.equals(criteria))
                {
                    collUnitStatisticss = UnitStatisticsPeer.doSelect(criteria);
                }
            }
        }
        lastUnitStatisticssCriteria = criteria;

        return collUnitStatisticss;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getUnitStatisticss(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List<UnitStatistics> getUnitStatisticss(Connection con) throws TorqueException
    {
        if (collUnitStatisticss == null)
        {
            collUnitStatisticss = getUnitStatisticss(new Criteria(10), con);
        }
        return collUnitStatisticss;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Report has previously
     * been saved, it will retrieve related UnitStatisticss from storage.
     * If this Report is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List<UnitStatistics> getUnitStatisticss(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collUnitStatisticss == null)
        {
            if (isNew())
            {
               collUnitStatisticss = new ArrayList<UnitStatistics>();
            }
            else
            {
                 criteria.add(UnitStatisticsPeer.REPORT_ID, getID());
                 collUnitStatisticss = UnitStatisticsPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(UnitStatisticsPeer.REPORT_ID, getID());
                 if (!lastUnitStatisticssCriteria.equals(criteria))
                 {
                     collUnitStatisticss = UnitStatisticsPeer.doSelect(criteria, con);
                 }
             }
         }
         lastUnitStatisticssCriteria = criteria;

         return collUnitStatisticss;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Report is new, it will return
     * an empty collection; or if this Report has previously
     * been saved, it will retrieve related UnitStatisticss from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Report.
     */
    protected List<UnitStatistics> getUnitStatisticssJoinReport(Criteria criteria)
        throws TorqueException
    {
        if (collUnitStatisticss == null)
        {
            if (isNew())
            {
               collUnitStatisticss = new ArrayList<UnitStatistics>();
            }
            else
            {
                criteria.add(UnitStatisticsPeer.REPORT_ID, getID());
                collUnitStatisticss = UnitStatisticsPeer.doSelectJoinReport(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(UnitStatisticsPeer.REPORT_ID, getID());
            if (!lastUnitStatisticssCriteria.equals(criteria))
            {
                collUnitStatisticss = UnitStatisticsPeer.doSelectJoinReport(criteria);
            }
        }
        lastUnitStatisticssCriteria = criteria;

        return collUnitStatisticss;
    }



        
    private static List<String> fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List<String> getFieldNames()
    {
        if (fieldNames == null)
        {
            fieldNames = new ArrayList<String>();
            fieldNames.add("ID");
            fieldNames.add("Filename");
            fieldNames = Collections.unmodifiableList(fieldNames);
        }
        return fieldNames;
    }

    /**
     * Retrieves a field from the object by field (Java) name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
        if (name.equals("ID"))
        {
            return new Long(getID());
        }
        if (name.equals("Filename"))
        {
            return getFilename();
        }
        return null;
    }

    /**
     * Set a field in the object by field (Java) name.
     *
     * @param name field name
     * @param value field value
     * @return True if value was set, false if not (invalid name / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occurs with the set[Field] method.
     */
    public boolean setByName(String name, Object value )
        throws TorqueException, IllegalArgumentException
    {
        if (name.equals("ID"))
        {
            if (value == null || ! (Long.class.isInstance(value)))
            {
                throw new IllegalArgumentException("setByName: value parameter was null or not a Long object.");
            }
            setID(((Long) value).longValue());
            return true;
        }
        if (name.equals("Filename"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setFilename((String) value);
            return true;
        }
        return false;
    }

    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
        if (name.equals(ReportPeer.ID))
        {
            return new Long(getID());
        }
        if (name.equals(ReportPeer.FILENAME))
        {
            return getFilename();
        }
        return null;
    }

    /**
     * Set field values by Peer Field Name
     *
     * @param name field name
     * @param value field value
     * @return True if value was set, false if not (invalid name / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occurs with the set[Field] method.
     */
    public boolean setByPeerName(String name, Object value)
        throws TorqueException, IllegalArgumentException
    {
      if (ReportPeer.ID.equals(name))
        {
            return setByName("ID", value);
        }
      if (ReportPeer.FILENAME.equals(name))
        {
            return setByName("Filename", value);
        }
        return false;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
        if (pos == 0)
        {
            return new Long(getID());
        }
        if (pos == 1)
        {
            return getFilename();
        }
        return null;
    }

    /**
     * Set field values by its position (zero based) in the XML schema.
     *
     * @param position The field position
     * @param value field value
     * @return True if value was set, false if not (invalid position / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occurs with the set[Field] method.
     */
    public boolean setByPosition(int position, Object value)
        throws TorqueException, IllegalArgumentException
    {
    if (position == 0)
        {
            return setByName("ID", value);
        }
    if (position == 1)
        {
            return setByName("Filename", value);
        }
        return false;
    }
     
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
        save(ReportPeer.DATABASE_NAME);
    }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
     *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
        try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }
    }

    /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
        if (!alreadyInSave)
        {
            alreadyInSave = true;



            // If this object has been modified, then save it to the database.
            if (isModified())
            {
                if (isNew())
                {
                    ReportPeer.doInsert((Report) this, con);
                    setNew(false);
                }
                else
                {
                    ReportPeer.doUpdate((Report) this, con);
                }
            }


            if (collBuildingStatisticss != null)
            {
                for (int i = 0; i < collBuildingStatisticss.size(); i++)
                {
                    ((BuildingStatistics) collBuildingStatisticss.get(i)).save(con);
                }
            }

            if (collFactionStatisticss != null)
            {
                for (int i = 0; i < collFactionStatisticss.size(); i++)
                {
                    ((FactionStatistics) collFactionStatisticss.get(i)).save(con);
                }
            }

            if (collShipStatisticss != null)
            {
                for (int i = 0; i < collShipStatisticss.size(); i++)
                {
                    ((ShipStatistics) collShipStatisticss.get(i)).save(con);
                }
            }

            if (collRegionStatisticss != null)
            {
                for (int i = 0; i < collRegionStatisticss.size(); i++)
                {
                    ((RegionStatistics) collRegionStatisticss.get(i)).save(con);
                }
            }

            if (collUnitStatisticss != null)
            {
                for (int i = 0; i < collUnitStatisticss.size(); i++)
                {
                    ((UnitStatistics) collUnitStatisticss.get(i)).save(con);
                }
            }
            alreadyInSave = false;
        }
    }


    /**
     * Set the PrimaryKey using ObjectKey.
     *
     * @param key iD ObjectKey
     */
    public void setPrimaryKey(ObjectKey key)
        throws TorqueException
    {
        setID(((NumberKey) key).longValue());
    }

    /**
     * Set the PrimaryKey using a String.
     *
     * @param key
     */
    public void setPrimaryKey(String key) throws TorqueException
    {
        setID(Long.parseLong(key));
    }


    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
        return SimpleKey.keyFor(getID());
    }
 

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     */
    public Report copy() throws TorqueException
    {
        return copy(true);
    }

    /**
     * Makes a copy of this object using connection.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     *
     * @param con the database connection to read associated objects.
     */
    public Report copy(Connection con) throws TorqueException
    {
        return copy(true, con);
    }

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * If the parameter deepcopy is true, it then fills all the
     * association collections and sets the related objects to
     * isNew=true.
     *
     * @param deepcopy whether to copy the associated objects.
     */
    public Report copy(boolean deepcopy) throws TorqueException
    {
        return copyInto(new Report(), deepcopy);
    }

    /**
     * Makes a copy of this object using connection.
     * It creates a new object filling in the simple attributes.
     * If the parameter deepcopy is true, it then fills all the
     * association collections and sets the related objects to
     * isNew=true.
     *
     * @param deepcopy whether to copy the associated objects.
     * @param con the database connection to read associated objects.
     */
    public Report copy(boolean deepcopy, Connection con) throws TorqueException
    {
        return copyInto(new Report(), deepcopy, con);
    }
  
    /**
     * Fills the copyObj with the contents of this object.
     * The associated objects are also copied and treated as new objects.
     *
     * @param copyObj the object to fill.
     */
    protected Report copyInto(Report copyObj) throws TorqueException
    {
        return copyInto(copyObj, true);
    }

  
    /**
     * Fills the copyObj with the contents of this object using connection.
     * The associated objects are also copied and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @param con the database connection to read associated objects.
     */
    protected Report copyInto(Report copyObj, Connection con) throws TorqueException
    {
        return copyInto(copyObj, true, con);
    }
  
    /**
     * Fills the copyObj with the contents of this object.
     * If deepcopy is true, The associated objects are also copied
     * and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @param deepcopy whether the associated objects should be copied.
     */
    protected Report copyInto(Report copyObj, boolean deepcopy) throws TorqueException
    {
        copyObj.setID(iD);
        copyObj.setFilename(filename);

        copyObj.setID( 0);

        if (deepcopy)
        {


        List<BuildingStatistics> vBuildingStatisticss = getBuildingStatisticss();
        if (vBuildingStatisticss != null)
        {
            for (int i = 0; i < vBuildingStatisticss.size(); i++)
            {
                BuildingStatistics obj =  vBuildingStatisticss.get(i);
                copyObj.addBuildingStatistics(obj.copy());
            }
        }
        else
        {
            copyObj.collBuildingStatisticss = null;
        }


        List<FactionStatistics> vFactionStatisticss = getFactionStatisticss();
        if (vFactionStatisticss != null)
        {
            for (int i = 0; i < vFactionStatisticss.size(); i++)
            {
                FactionStatistics obj =  vFactionStatisticss.get(i);
                copyObj.addFactionStatistics(obj.copy());
            }
        }
        else
        {
            copyObj.collFactionStatisticss = null;
        }


        List<ShipStatistics> vShipStatisticss = getShipStatisticss();
        if (vShipStatisticss != null)
        {
            for (int i = 0; i < vShipStatisticss.size(); i++)
            {
                ShipStatistics obj =  vShipStatisticss.get(i);
                copyObj.addShipStatistics(obj.copy());
            }
        }
        else
        {
            copyObj.collShipStatisticss = null;
        }


        List<RegionStatistics> vRegionStatisticss = getRegionStatisticss();
        if (vRegionStatisticss != null)
        {
            for (int i = 0; i < vRegionStatisticss.size(); i++)
            {
                RegionStatistics obj =  vRegionStatisticss.get(i);
                copyObj.addRegionStatistics(obj.copy());
            }
        }
        else
        {
            copyObj.collRegionStatisticss = null;
        }


        List<UnitStatistics> vUnitStatisticss = getUnitStatisticss();
        if (vUnitStatisticss != null)
        {
            for (int i = 0; i < vUnitStatisticss.size(); i++)
            {
                UnitStatistics obj =  vUnitStatisticss.get(i);
                copyObj.addUnitStatistics(obj.copy());
            }
        }
        else
        {
            copyObj.collUnitStatisticss = null;
        }
        }
        return copyObj;
    }
        
    
    /**
     * Fills the copyObj with the contents of this object using connection.
     * If deepcopy is true, The associated objects are also copied
     * and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @param deepcopy whether the associated objects should be copied.
     * @param con the database connection to read associated objects.
     */
    protected Report copyInto(Report copyObj, boolean deepcopy, Connection con) throws TorqueException
    {
        copyObj.setID(iD);
        copyObj.setFilename(filename);

        copyObj.setID( 0);

        if (deepcopy)
        {


        List<BuildingStatistics> vBuildingStatisticss = getBuildingStatisticss(con);
        if (vBuildingStatisticss != null)
        {
            for (int i = 0; i < vBuildingStatisticss.size(); i++)
            {
                BuildingStatistics obj =  vBuildingStatisticss.get(i);
                copyObj.addBuildingStatistics(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collBuildingStatisticss = null;
        }


        List<FactionStatistics> vFactionStatisticss = getFactionStatisticss(con);
        if (vFactionStatisticss != null)
        {
            for (int i = 0; i < vFactionStatisticss.size(); i++)
            {
                FactionStatistics obj =  vFactionStatisticss.get(i);
                copyObj.addFactionStatistics(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collFactionStatisticss = null;
        }


        List<ShipStatistics> vShipStatisticss = getShipStatisticss(con);
        if (vShipStatisticss != null)
        {
            for (int i = 0; i < vShipStatisticss.size(); i++)
            {
                ShipStatistics obj =  vShipStatisticss.get(i);
                copyObj.addShipStatistics(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collShipStatisticss = null;
        }


        List<RegionStatistics> vRegionStatisticss = getRegionStatisticss(con);
        if (vRegionStatisticss != null)
        {
            for (int i = 0; i < vRegionStatisticss.size(); i++)
            {
                RegionStatistics obj =  vRegionStatisticss.get(i);
                copyObj.addRegionStatistics(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collRegionStatisticss = null;
        }


        List<UnitStatistics> vUnitStatisticss = getUnitStatisticss(con);
        if (vUnitStatisticss != null)
        {
            for (int i = 0; i < vUnitStatisticss.size(); i++)
            {
                UnitStatistics obj =  vUnitStatisticss.get(i);
                copyObj.addUnitStatistics(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collUnitStatisticss = null;
        }
        }
        return copyObj;
    }
    
    

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public ReportPeer getPeer()
    {
        return peer;
    }

    /**
     * Retrieves the TableMap object related to this Table data without
     * compiler warnings of using getPeer().getTableMap().
     *
     * @return The associated TableMap object.
     */
    public TableMap getTableMap() throws TorqueException
    {
        return ReportPeer.getTableMap();
    }


    public String toString()
    {
        StringBuffer str = new StringBuffer();
        str.append("Report:\n");
        str.append("ID = ")
           .append(getID())
           .append("\n");
        str.append("Filename = ")
           .append(getFilename())
           .append("\n");
        return(str.toString());
    }
}
