package magellan.plugin.statistics.torque;


import java.math.BigDecimal;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.torque.TorqueException;
import org.apache.torque.map.TableMap;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;





/**
 * Contains informations about turn specific region data
 *
 * This class was autogenerated by Torque on:
 *
 * [Fri May 23 08:09:17 CEST 2008]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to RegionStatisticsData
 */
public abstract class BaseRegionStatisticsData extends BaseObject
{
    /** Serial version */
    private static final long serialVersionUID = 1211522957714L;

    /** The Peer class */
    private static final RegionStatisticsDataPeer peer =
        new RegionStatisticsDataPeer();


    /** The value for the iD field */
    private long iD;

    /** The value for the regionId field */
    private long regionId;

    /** The value for the turn field */
    private int turn;

    /** The value for the name field */
    private String name;

    /** The value for the description field */
    private String description;

    /** The value for the maxRecruits field */
    private int maxRecruits;

    /** The value for the maxLuxuries field */
    private int maxLuxuries;

    /** The value for the maxEntertain field */
    private int maxEntertain;

    /** The value for the stones field */
    private int stones;

    /** The value for the trees field */
    private int trees;

    /** The value for the sprouts field */
    private int sprouts;

    /** The value for the silver field */
    private int silver;

    /** The value for the peasants field */
    private int peasants;

    /** The value for the inhabitants field */
    private int inhabitants;

    /** The value for the iron field */
    private int iron;

    /** The value for the laen field */
    private int laen;

    /** The value for the herb field */
    private String herb;


    /**
     * Get the ID
     *
     * @return long
     */
    public long getID()
    {
        return iD;
    }


    /**
     * Set the value of ID
     *
     * @param v new value
     */
    public void setID(long v) throws TorqueException
    {

        if (this.iD != v)
        {
            this.iD = v;
            setModified(true);
        }



        // update associated RegionStatisticsShipData
        if (collRegionStatisticsShipDatas != null)
        {
            for (int i = 0; i < collRegionStatisticsShipDatas.size(); i++)
            {
                ((RegionStatisticsShipData) collRegionStatisticsShipDatas.get(i))
                        .setTurnId(v);
            }
        }

        // update associated RegionStatisticsPricesData
        if (collRegionStatisticsPricesDatas != null)
        {
            for (int i = 0; i < collRegionStatisticsPricesDatas.size(); i++)
            {
                ((RegionStatisticsPricesData) collRegionStatisticsPricesDatas.get(i))
                        .setTurnId(v);
            }
        }

        // update associated RegionStatisticsResourcesData
        if (collRegionStatisticsResourcesDatas != null)
        {
            for (int i = 0; i < collRegionStatisticsResourcesDatas.size(); i++)
            {
                ((RegionStatisticsResourcesData) collRegionStatisticsResourcesDatas.get(i))
                        .setTurnId(v);
            }
        }
    }

    /**
     * Get the RegionId
     *
     * @return long
     */
    public long getRegionId()
    {
        return regionId;
    }


    /**
     * Set the value of RegionId
     *
     * @param v new value
     */
    public void setRegionId(long v) throws TorqueException
    {

        if (this.regionId != v)
        {
            this.regionId = v;
            setModified(true);
        }


        if (aRegionStatistics != null && !(aRegionStatistics.getID() == v))
        {
            aRegionStatistics = null;
        }

    }

    /**
     * Get the Turn
     *
     * @return int
     */
    public int getTurn()
    {
        return turn;
    }


    /**
     * Set the value of Turn
     *
     * @param v new value
     */
    public void setTurn(int v) 
    {

        if (this.turn != v)
        {
            this.turn = v;
            setModified(true);
        }


    }

    /**
     * Get the Name
     *
     * @return String
     */
    public String getName()
    {
        return name;
    }


    /**
     * Set the value of Name
     *
     * @param v new value
     */
    public void setName(String v) 
    {

        if (!ObjectUtils.equals(this.name, v))
        {
            this.name = v;
            setModified(true);
        }


    }

    /**
     * Get the Description
     *
     * @return String
     */
    public String getDescription()
    {
        return description;
    }


    /**
     * Set the value of Description
     *
     * @param v new value
     */
    public void setDescription(String v) 
    {

        if (!ObjectUtils.equals(this.description, v))
        {
            this.description = v;
            setModified(true);
        }


    }

    /**
     * Get the MaxRecruits
     *
     * @return int
     */
    public int getMaxRecruits()
    {
        return maxRecruits;
    }


    /**
     * Set the value of MaxRecruits
     *
     * @param v new value
     */
    public void setMaxRecruits(int v) 
    {

        if (this.maxRecruits != v)
        {
            this.maxRecruits = v;
            setModified(true);
        }


    }

    /**
     * Get the MaxLuxuries
     *
     * @return int
     */
    public int getMaxLuxuries()
    {
        return maxLuxuries;
    }


    /**
     * Set the value of MaxLuxuries
     *
     * @param v new value
     */
    public void setMaxLuxuries(int v) 
    {

        if (this.maxLuxuries != v)
        {
            this.maxLuxuries = v;
            setModified(true);
        }


    }

    /**
     * Get the MaxEntertain
     *
     * @return int
     */
    public int getMaxEntertain()
    {
        return maxEntertain;
    }


    /**
     * Set the value of MaxEntertain
     *
     * @param v new value
     */
    public void setMaxEntertain(int v) 
    {

        if (this.maxEntertain != v)
        {
            this.maxEntertain = v;
            setModified(true);
        }


    }

    /**
     * Get the Stones
     *
     * @return int
     */
    public int getStones()
    {
        return stones;
    }


    /**
     * Set the value of Stones
     *
     * @param v new value
     */
    public void setStones(int v) 
    {

        if (this.stones != v)
        {
            this.stones = v;
            setModified(true);
        }


    }

    /**
     * Get the Trees
     *
     * @return int
     */
    public int getTrees()
    {
        return trees;
    }


    /**
     * Set the value of Trees
     *
     * @param v new value
     */
    public void setTrees(int v) 
    {

        if (this.trees != v)
        {
            this.trees = v;
            setModified(true);
        }


    }

    /**
     * Get the Sprouts
     *
     * @return int
     */
    public int getSprouts()
    {
        return sprouts;
    }


    /**
     * Set the value of Sprouts
     *
     * @param v new value
     */
    public void setSprouts(int v) 
    {

        if (this.sprouts != v)
        {
            this.sprouts = v;
            setModified(true);
        }


    }

    /**
     * Get the Silver
     *
     * @return int
     */
    public int getSilver()
    {
        return silver;
    }


    /**
     * Set the value of Silver
     *
     * @param v new value
     */
    public void setSilver(int v) 
    {

        if (this.silver != v)
        {
            this.silver = v;
            setModified(true);
        }


    }

    /**
     * Get the Peasants
     *
     * @return int
     */
    public int getPeasants()
    {
        return peasants;
    }


    /**
     * Set the value of Peasants
     *
     * @param v new value
     */
    public void setPeasants(int v) 
    {

        if (this.peasants != v)
        {
            this.peasants = v;
            setModified(true);
        }


    }

    /**
     * Get the Inhabitants
     *
     * @return int
     */
    public int getInhabitants()
    {
        return inhabitants;
    }


    /**
     * Set the value of Inhabitants
     *
     * @param v new value
     */
    public void setInhabitants(int v) 
    {

        if (this.inhabitants != v)
        {
            this.inhabitants = v;
            setModified(true);
        }


    }

    /**
     * Get the Iron
     *
     * @return int
     */
    public int getIron()
    {
        return iron;
    }


    /**
     * Set the value of Iron
     *
     * @param v new value
     */
    public void setIron(int v) 
    {

        if (this.iron != v)
        {
            this.iron = v;
            setModified(true);
        }


    }

    /**
     * Get the Laen
     *
     * @return int
     */
    public int getLaen()
    {
        return laen;
    }


    /**
     * Set the value of Laen
     *
     * @param v new value
     */
    public void setLaen(int v) 
    {

        if (this.laen != v)
        {
            this.laen = v;
            setModified(true);
        }


    }

    /**
     * Get the Herb
     *
     * @return String
     */
    public String getHerb()
    {
        return herb;
    }


    /**
     * Set the value of Herb
     *
     * @param v new value
     */
    public void setHerb(String v) 
    {

        if (!ObjectUtils.equals(this.herb, v))
        {
            this.herb = v;
            setModified(true);
        }


    }

    



    private RegionStatistics aRegionStatistics;

    /**
     * Declares an association between this object and a RegionStatistics object
     *
     * @param v RegionStatistics
     * @throws TorqueException
     */
    public void setRegionStatistics(RegionStatistics v) throws TorqueException
    {
        if (v == null)
        {
            setRegionId( 0);
        }
        else
        {
            setRegionId(v.getID());
        }
        aRegionStatistics = v;
    }


    /**
     * Returns the associated RegionStatistics object.
     * If it was not retrieved before, the object is retrieved from
     * the database
     *
     * @return the associated RegionStatistics object
     * @throws TorqueException
     */
    public RegionStatistics getRegionStatistics()
        throws TorqueException
    {
        if (aRegionStatistics == null && (this.regionId != 0))
        {
            aRegionStatistics = RegionStatisticsPeer.retrieveByPK(SimpleKey.keyFor(this.regionId));
        }
        return aRegionStatistics;
    }

    /**
     * Return the associated RegionStatistics object
     * If it was not retrieved before, the object is retrieved from
     * the database using the passed connection
     *
     * @param connection the connection used to retrieve the associated object
     *        from the database, if it was not retrieved before
     * @return the associated RegionStatistics object
     * @throws TorqueException
     */
    public RegionStatistics getRegionStatistics(Connection connection)
        throws TorqueException
    {
        if (aRegionStatistics == null && (this.regionId != 0))
        {
            aRegionStatistics = RegionStatisticsPeer.retrieveByPK(SimpleKey.keyFor(this.regionId), connection);
        }
        return aRegionStatistics;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setRegionStatisticsKey(ObjectKey key) throws TorqueException
    {

        setRegionId(((NumberKey) key).longValue());
    }
   


    /**
     * Collection to store aggregation of collRegionStatisticsShipDatas
     */
    protected List<RegionStatisticsShipData> collRegionStatisticsShipDatas;

    /**
     * Temporary storage of collRegionStatisticsShipDatas to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initRegionStatisticsShipDatas()
    {
        if (collRegionStatisticsShipDatas == null)
        {
            collRegionStatisticsShipDatas = new ArrayList<RegionStatisticsShipData>();
        }
    }


    /**
     * Method called to associate a RegionStatisticsShipData object to this object
     * through the RegionStatisticsShipData foreign key attribute
     *
     * @param l RegionStatisticsShipData
     * @throws TorqueException
     */
    public void addRegionStatisticsShipData(RegionStatisticsShipData l) throws TorqueException
    {
        getRegionStatisticsShipDatas().add(l);
        l.setRegionStatisticsData((RegionStatisticsData) this);
    }

    /**
     * Method called to associate a RegionStatisticsShipData object to this object
     * through the RegionStatisticsShipData foreign key attribute using connection.
     *
     * @param l RegionStatisticsShipData
     * @throws TorqueException
     */
    public void addRegionStatisticsShipData(RegionStatisticsShipData l, Connection con) throws TorqueException
    {
        getRegionStatisticsShipDatas(con).add(l);
        l.setRegionStatisticsData((RegionStatisticsData) this);
    }

    /**
     * The criteria used to select the current contents of collRegionStatisticsShipDatas
     */
    private Criteria lastRegionStatisticsShipDatasCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getRegionStatisticsShipDatas(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List<RegionStatisticsShipData> getRegionStatisticsShipDatas()
        throws TorqueException
    {
        if (collRegionStatisticsShipDatas == null)
        {
            collRegionStatisticsShipDatas = getRegionStatisticsShipDatas(new Criteria(10));
        }
        return collRegionStatisticsShipDatas;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this RegionStatisticsData has previously
     * been saved, it will retrieve related RegionStatisticsShipDatas from storage.
     * If this RegionStatisticsData is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List<RegionStatisticsShipData> getRegionStatisticsShipDatas(Criteria criteria) throws TorqueException
    {
        if (collRegionStatisticsShipDatas == null)
        {
            if (isNew())
            {
               collRegionStatisticsShipDatas = new ArrayList<RegionStatisticsShipData>();
            }
            else
            {
                criteria.add(RegionStatisticsShipDataPeer.TURN_ID, getID() );
                collRegionStatisticsShipDatas = RegionStatisticsShipDataPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(RegionStatisticsShipDataPeer.TURN_ID, getID());
                if (!lastRegionStatisticsShipDatasCriteria.equals(criteria))
                {
                    collRegionStatisticsShipDatas = RegionStatisticsShipDataPeer.doSelect(criteria);
                }
            }
        }
        lastRegionStatisticsShipDatasCriteria = criteria;

        return collRegionStatisticsShipDatas;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getRegionStatisticsShipDatas(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List<RegionStatisticsShipData> getRegionStatisticsShipDatas(Connection con) throws TorqueException
    {
        if (collRegionStatisticsShipDatas == null)
        {
            collRegionStatisticsShipDatas = getRegionStatisticsShipDatas(new Criteria(10), con);
        }
        return collRegionStatisticsShipDatas;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this RegionStatisticsData has previously
     * been saved, it will retrieve related RegionStatisticsShipDatas from storage.
     * If this RegionStatisticsData is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List<RegionStatisticsShipData> getRegionStatisticsShipDatas(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collRegionStatisticsShipDatas == null)
        {
            if (isNew())
            {
               collRegionStatisticsShipDatas = new ArrayList<RegionStatisticsShipData>();
            }
            else
            {
                 criteria.add(RegionStatisticsShipDataPeer.TURN_ID, getID());
                 collRegionStatisticsShipDatas = RegionStatisticsShipDataPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(RegionStatisticsShipDataPeer.TURN_ID, getID());
                 if (!lastRegionStatisticsShipDatasCriteria.equals(criteria))
                 {
                     collRegionStatisticsShipDatas = RegionStatisticsShipDataPeer.doSelect(criteria, con);
                 }
             }
         }
         lastRegionStatisticsShipDatasCriteria = criteria;

         return collRegionStatisticsShipDatas;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this RegionStatisticsData is new, it will return
     * an empty collection; or if this RegionStatisticsData has previously
     * been saved, it will retrieve related RegionStatisticsShipDatas from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in RegionStatisticsData.
     */
    protected List<RegionStatisticsShipData> getRegionStatisticsShipDatasJoinRegionStatisticsData(Criteria criteria)
        throws TorqueException
    {
        if (collRegionStatisticsShipDatas == null)
        {
            if (isNew())
            {
               collRegionStatisticsShipDatas = new ArrayList<RegionStatisticsShipData>();
            }
            else
            {
                criteria.add(RegionStatisticsShipDataPeer.TURN_ID, getID());
                collRegionStatisticsShipDatas = RegionStatisticsShipDataPeer.doSelectJoinRegionStatisticsData(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(RegionStatisticsShipDataPeer.TURN_ID, getID());
            if (!lastRegionStatisticsShipDatasCriteria.equals(criteria))
            {
                collRegionStatisticsShipDatas = RegionStatisticsShipDataPeer.doSelectJoinRegionStatisticsData(criteria);
            }
        }
        lastRegionStatisticsShipDatasCriteria = criteria;

        return collRegionStatisticsShipDatas;
    }





    /**
     * Collection to store aggregation of collRegionStatisticsPricesDatas
     */
    protected List<RegionStatisticsPricesData> collRegionStatisticsPricesDatas;

    /**
     * Temporary storage of collRegionStatisticsPricesDatas to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initRegionStatisticsPricesDatas()
    {
        if (collRegionStatisticsPricesDatas == null)
        {
            collRegionStatisticsPricesDatas = new ArrayList<RegionStatisticsPricesData>();
        }
    }


    /**
     * Method called to associate a RegionStatisticsPricesData object to this object
     * through the RegionStatisticsPricesData foreign key attribute
     *
     * @param l RegionStatisticsPricesData
     * @throws TorqueException
     */
    public void addRegionStatisticsPricesData(RegionStatisticsPricesData l) throws TorqueException
    {
        getRegionStatisticsPricesDatas().add(l);
        l.setRegionStatisticsData((RegionStatisticsData) this);
    }

    /**
     * Method called to associate a RegionStatisticsPricesData object to this object
     * through the RegionStatisticsPricesData foreign key attribute using connection.
     *
     * @param l RegionStatisticsPricesData
     * @throws TorqueException
     */
    public void addRegionStatisticsPricesData(RegionStatisticsPricesData l, Connection con) throws TorqueException
    {
        getRegionStatisticsPricesDatas(con).add(l);
        l.setRegionStatisticsData((RegionStatisticsData) this);
    }

    /**
     * The criteria used to select the current contents of collRegionStatisticsPricesDatas
     */
    private Criteria lastRegionStatisticsPricesDatasCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getRegionStatisticsPricesDatas(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List<RegionStatisticsPricesData> getRegionStatisticsPricesDatas()
        throws TorqueException
    {
        if (collRegionStatisticsPricesDatas == null)
        {
            collRegionStatisticsPricesDatas = getRegionStatisticsPricesDatas(new Criteria(10));
        }
        return collRegionStatisticsPricesDatas;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this RegionStatisticsData has previously
     * been saved, it will retrieve related RegionStatisticsPricesDatas from storage.
     * If this RegionStatisticsData is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List<RegionStatisticsPricesData> getRegionStatisticsPricesDatas(Criteria criteria) throws TorqueException
    {
        if (collRegionStatisticsPricesDatas == null)
        {
            if (isNew())
            {
               collRegionStatisticsPricesDatas = new ArrayList<RegionStatisticsPricesData>();
            }
            else
            {
                criteria.add(RegionStatisticsPricesDataPeer.TURN_ID, getID() );
                collRegionStatisticsPricesDatas = RegionStatisticsPricesDataPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(RegionStatisticsPricesDataPeer.TURN_ID, getID());
                if (!lastRegionStatisticsPricesDatasCriteria.equals(criteria))
                {
                    collRegionStatisticsPricesDatas = RegionStatisticsPricesDataPeer.doSelect(criteria);
                }
            }
        }
        lastRegionStatisticsPricesDatasCriteria = criteria;

        return collRegionStatisticsPricesDatas;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getRegionStatisticsPricesDatas(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List<RegionStatisticsPricesData> getRegionStatisticsPricesDatas(Connection con) throws TorqueException
    {
        if (collRegionStatisticsPricesDatas == null)
        {
            collRegionStatisticsPricesDatas = getRegionStatisticsPricesDatas(new Criteria(10), con);
        }
        return collRegionStatisticsPricesDatas;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this RegionStatisticsData has previously
     * been saved, it will retrieve related RegionStatisticsPricesDatas from storage.
     * If this RegionStatisticsData is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List<RegionStatisticsPricesData> getRegionStatisticsPricesDatas(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collRegionStatisticsPricesDatas == null)
        {
            if (isNew())
            {
               collRegionStatisticsPricesDatas = new ArrayList<RegionStatisticsPricesData>();
            }
            else
            {
                 criteria.add(RegionStatisticsPricesDataPeer.TURN_ID, getID());
                 collRegionStatisticsPricesDatas = RegionStatisticsPricesDataPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(RegionStatisticsPricesDataPeer.TURN_ID, getID());
                 if (!lastRegionStatisticsPricesDatasCriteria.equals(criteria))
                 {
                     collRegionStatisticsPricesDatas = RegionStatisticsPricesDataPeer.doSelect(criteria, con);
                 }
             }
         }
         lastRegionStatisticsPricesDatasCriteria = criteria;

         return collRegionStatisticsPricesDatas;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this RegionStatisticsData is new, it will return
     * an empty collection; or if this RegionStatisticsData has previously
     * been saved, it will retrieve related RegionStatisticsPricesDatas from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in RegionStatisticsData.
     */
    protected List<RegionStatisticsPricesData> getRegionStatisticsPricesDatasJoinRegionStatisticsData(Criteria criteria)
        throws TorqueException
    {
        if (collRegionStatisticsPricesDatas == null)
        {
            if (isNew())
            {
               collRegionStatisticsPricesDatas = new ArrayList<RegionStatisticsPricesData>();
            }
            else
            {
                criteria.add(RegionStatisticsPricesDataPeer.TURN_ID, getID());
                collRegionStatisticsPricesDatas = RegionStatisticsPricesDataPeer.doSelectJoinRegionStatisticsData(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(RegionStatisticsPricesDataPeer.TURN_ID, getID());
            if (!lastRegionStatisticsPricesDatasCriteria.equals(criteria))
            {
                collRegionStatisticsPricesDatas = RegionStatisticsPricesDataPeer.doSelectJoinRegionStatisticsData(criteria);
            }
        }
        lastRegionStatisticsPricesDatasCriteria = criteria;

        return collRegionStatisticsPricesDatas;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this RegionStatisticsData is new, it will return
     * an empty collection; or if this RegionStatisticsData has previously
     * been saved, it will retrieve related RegionStatisticsPricesDatas from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in RegionStatisticsData.
     */
    protected List<RegionStatisticsPricesData> getRegionStatisticsPricesDatasJoinRegionStatistics(Criteria criteria)
        throws TorqueException
    {
        if (collRegionStatisticsPricesDatas == null)
        {
            if (isNew())
            {
               collRegionStatisticsPricesDatas = new ArrayList<RegionStatisticsPricesData>();
            }
            else
            {
                criteria.add(RegionStatisticsPricesDataPeer.TURN_ID, getID());
                collRegionStatisticsPricesDatas = RegionStatisticsPricesDataPeer.doSelectJoinRegionStatistics(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(RegionStatisticsPricesDataPeer.TURN_ID, getID());
            if (!lastRegionStatisticsPricesDatasCriteria.equals(criteria))
            {
                collRegionStatisticsPricesDatas = RegionStatisticsPricesDataPeer.doSelectJoinRegionStatistics(criteria);
            }
        }
        lastRegionStatisticsPricesDatasCriteria = criteria;

        return collRegionStatisticsPricesDatas;
    }





    /**
     * Collection to store aggregation of collRegionStatisticsResourcesDatas
     */
    protected List<RegionStatisticsResourcesData> collRegionStatisticsResourcesDatas;

    /**
     * Temporary storage of collRegionStatisticsResourcesDatas to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initRegionStatisticsResourcesDatas()
    {
        if (collRegionStatisticsResourcesDatas == null)
        {
            collRegionStatisticsResourcesDatas = new ArrayList<RegionStatisticsResourcesData>();
        }
    }


    /**
     * Method called to associate a RegionStatisticsResourcesData object to this object
     * through the RegionStatisticsResourcesData foreign key attribute
     *
     * @param l RegionStatisticsResourcesData
     * @throws TorqueException
     */
    public void addRegionStatisticsResourcesData(RegionStatisticsResourcesData l) throws TorqueException
    {
        getRegionStatisticsResourcesDatas().add(l);
        l.setRegionStatisticsData((RegionStatisticsData) this);
    }

    /**
     * Method called to associate a RegionStatisticsResourcesData object to this object
     * through the RegionStatisticsResourcesData foreign key attribute using connection.
     *
     * @param l RegionStatisticsResourcesData
     * @throws TorqueException
     */
    public void addRegionStatisticsResourcesData(RegionStatisticsResourcesData l, Connection con) throws TorqueException
    {
        getRegionStatisticsResourcesDatas(con).add(l);
        l.setRegionStatisticsData((RegionStatisticsData) this);
    }

    /**
     * The criteria used to select the current contents of collRegionStatisticsResourcesDatas
     */
    private Criteria lastRegionStatisticsResourcesDatasCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getRegionStatisticsResourcesDatas(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List<RegionStatisticsResourcesData> getRegionStatisticsResourcesDatas()
        throws TorqueException
    {
        if (collRegionStatisticsResourcesDatas == null)
        {
            collRegionStatisticsResourcesDatas = getRegionStatisticsResourcesDatas(new Criteria(10));
        }
        return collRegionStatisticsResourcesDatas;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this RegionStatisticsData has previously
     * been saved, it will retrieve related RegionStatisticsResourcesDatas from storage.
     * If this RegionStatisticsData is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List<RegionStatisticsResourcesData> getRegionStatisticsResourcesDatas(Criteria criteria) throws TorqueException
    {
        if (collRegionStatisticsResourcesDatas == null)
        {
            if (isNew())
            {
               collRegionStatisticsResourcesDatas = new ArrayList<RegionStatisticsResourcesData>();
            }
            else
            {
                criteria.add(RegionStatisticsResourcesDataPeer.TURN_ID, getID() );
                collRegionStatisticsResourcesDatas = RegionStatisticsResourcesDataPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.add(RegionStatisticsResourcesDataPeer.TURN_ID, getID());
                if (!lastRegionStatisticsResourcesDatasCriteria.equals(criteria))
                {
                    collRegionStatisticsResourcesDatas = RegionStatisticsResourcesDataPeer.doSelect(criteria);
                }
            }
        }
        lastRegionStatisticsResourcesDatasCriteria = criteria;

        return collRegionStatisticsResourcesDatas;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getRegionStatisticsResourcesDatas(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List<RegionStatisticsResourcesData> getRegionStatisticsResourcesDatas(Connection con) throws TorqueException
    {
        if (collRegionStatisticsResourcesDatas == null)
        {
            collRegionStatisticsResourcesDatas = getRegionStatisticsResourcesDatas(new Criteria(10), con);
        }
        return collRegionStatisticsResourcesDatas;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this RegionStatisticsData has previously
     * been saved, it will retrieve related RegionStatisticsResourcesDatas from storage.
     * If this RegionStatisticsData is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List<RegionStatisticsResourcesData> getRegionStatisticsResourcesDatas(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collRegionStatisticsResourcesDatas == null)
        {
            if (isNew())
            {
               collRegionStatisticsResourcesDatas = new ArrayList<RegionStatisticsResourcesData>();
            }
            else
            {
                 criteria.add(RegionStatisticsResourcesDataPeer.TURN_ID, getID());
                 collRegionStatisticsResourcesDatas = RegionStatisticsResourcesDataPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                 criteria.add(RegionStatisticsResourcesDataPeer.TURN_ID, getID());
                 if (!lastRegionStatisticsResourcesDatasCriteria.equals(criteria))
                 {
                     collRegionStatisticsResourcesDatas = RegionStatisticsResourcesDataPeer.doSelect(criteria, con);
                 }
             }
         }
         lastRegionStatisticsResourcesDatasCriteria = criteria;

         return collRegionStatisticsResourcesDatas;
     }











    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this RegionStatisticsData is new, it will return
     * an empty collection; or if this RegionStatisticsData has previously
     * been saved, it will retrieve related RegionStatisticsResourcesDatas from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in RegionStatisticsData.
     */
    protected List<RegionStatisticsResourcesData> getRegionStatisticsResourcesDatasJoinRegionStatisticsData(Criteria criteria)
        throws TorqueException
    {
        if (collRegionStatisticsResourcesDatas == null)
        {
            if (isNew())
            {
               collRegionStatisticsResourcesDatas = new ArrayList<RegionStatisticsResourcesData>();
            }
            else
            {
                criteria.add(RegionStatisticsResourcesDataPeer.TURN_ID, getID());
                collRegionStatisticsResourcesDatas = RegionStatisticsResourcesDataPeer.doSelectJoinRegionStatisticsData(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(RegionStatisticsResourcesDataPeer.TURN_ID, getID());
            if (!lastRegionStatisticsResourcesDatasCriteria.equals(criteria))
            {
                collRegionStatisticsResourcesDatas = RegionStatisticsResourcesDataPeer.doSelectJoinRegionStatisticsData(criteria);
            }
        }
        lastRegionStatisticsResourcesDatasCriteria = criteria;

        return collRegionStatisticsResourcesDatas;
    }









    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this RegionStatisticsData is new, it will return
     * an empty collection; or if this RegionStatisticsData has previously
     * been saved, it will retrieve related RegionStatisticsResourcesDatas from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in RegionStatisticsData.
     */
    protected List<RegionStatisticsResourcesData> getRegionStatisticsResourcesDatasJoinRegionStatistics(Criteria criteria)
        throws TorqueException
    {
        if (collRegionStatisticsResourcesDatas == null)
        {
            if (isNew())
            {
               collRegionStatisticsResourcesDatas = new ArrayList<RegionStatisticsResourcesData>();
            }
            else
            {
                criteria.add(RegionStatisticsResourcesDataPeer.TURN_ID, getID());
                collRegionStatisticsResourcesDatas = RegionStatisticsResourcesDataPeer.doSelectJoinRegionStatistics(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.add(RegionStatisticsResourcesDataPeer.TURN_ID, getID());
            if (!lastRegionStatisticsResourcesDatasCriteria.equals(criteria))
            {
                collRegionStatisticsResourcesDatas = RegionStatisticsResourcesDataPeer.doSelectJoinRegionStatistics(criteria);
            }
        }
        lastRegionStatisticsResourcesDatasCriteria = criteria;

        return collRegionStatisticsResourcesDatas;
    }



        
    private static List<String> fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List<String> getFieldNames()
    {
        if (fieldNames == null)
        {
            fieldNames = new ArrayList<String>();
            fieldNames.add("ID");
            fieldNames.add("RegionId");
            fieldNames.add("Turn");
            fieldNames.add("Name");
            fieldNames.add("Description");
            fieldNames.add("MaxRecruits");
            fieldNames.add("MaxLuxuries");
            fieldNames.add("MaxEntertain");
            fieldNames.add("Stones");
            fieldNames.add("Trees");
            fieldNames.add("Sprouts");
            fieldNames.add("Silver");
            fieldNames.add("Peasants");
            fieldNames.add("Inhabitants");
            fieldNames.add("Iron");
            fieldNames.add("Laen");
            fieldNames.add("Herb");
            fieldNames = Collections.unmodifiableList(fieldNames);
        }
        return fieldNames;
    }

    /**
     * Retrieves a field from the object by field (Java) name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
        if (name.equals("ID"))
        {
            return new Long(getID());
        }
        if (name.equals("RegionId"))
        {
            return new Long(getRegionId());
        }
        if (name.equals("Turn"))
        {
            return new Integer(getTurn());
        }
        if (name.equals("Name"))
        {
            return getName();
        }
        if (name.equals("Description"))
        {
            return getDescription();
        }
        if (name.equals("MaxRecruits"))
        {
            return new Integer(getMaxRecruits());
        }
        if (name.equals("MaxLuxuries"))
        {
            return new Integer(getMaxLuxuries());
        }
        if (name.equals("MaxEntertain"))
        {
            return new Integer(getMaxEntertain());
        }
        if (name.equals("Stones"))
        {
            return new Integer(getStones());
        }
        if (name.equals("Trees"))
        {
            return new Integer(getTrees());
        }
        if (name.equals("Sprouts"))
        {
            return new Integer(getSprouts());
        }
        if (name.equals("Silver"))
        {
            return new Integer(getSilver());
        }
        if (name.equals("Peasants"))
        {
            return new Integer(getPeasants());
        }
        if (name.equals("Inhabitants"))
        {
            return new Integer(getInhabitants());
        }
        if (name.equals("Iron"))
        {
            return new Integer(getIron());
        }
        if (name.equals("Laen"))
        {
            return new Integer(getLaen());
        }
        if (name.equals("Herb"))
        {
            return getHerb();
        }
        return null;
    }

    /**
     * Set a field in the object by field (Java) name.
     *
     * @param name field name
     * @param value field value
     * @return True if value was set, false if not (invalid name / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occurs with the set[Field] method.
     */
    public boolean setByName(String name, Object value )
        throws TorqueException, IllegalArgumentException
    {
        if (name.equals("ID"))
        {
            if (value == null || ! (Long.class.isInstance(value)))
            {
                throw new IllegalArgumentException("setByName: value parameter was null or not a Long object.");
            }
            setID(((Long) value).longValue());
            return true;
        }
        if (name.equals("RegionId"))
        {
            if (value == null || ! (Long.class.isInstance(value)))
            {
                throw new IllegalArgumentException("setByName: value parameter was null or not a Long object.");
            }
            setRegionId(((Long) value).longValue());
            return true;
        }
        if (name.equals("Turn"))
        {
            if (value == null || ! (Integer.class.isInstance(value)))
            {
                throw new IllegalArgumentException("setByName: value parameter was null or not an Integer object.");
            }
            setTurn(((Integer) value).intValue());
            return true;
        }
        if (name.equals("Name"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setName((String) value);
            return true;
        }
        if (name.equals("Description"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setDescription((String) value);
            return true;
        }
        if (name.equals("MaxRecruits"))
        {
            if (value == null || ! (Integer.class.isInstance(value)))
            {
                throw new IllegalArgumentException("setByName: value parameter was null or not an Integer object.");
            }
            setMaxRecruits(((Integer) value).intValue());
            return true;
        }
        if (name.equals("MaxLuxuries"))
        {
            if (value == null || ! (Integer.class.isInstance(value)))
            {
                throw new IllegalArgumentException("setByName: value parameter was null or not an Integer object.");
            }
            setMaxLuxuries(((Integer) value).intValue());
            return true;
        }
        if (name.equals("MaxEntertain"))
        {
            if (value == null || ! (Integer.class.isInstance(value)))
            {
                throw new IllegalArgumentException("setByName: value parameter was null or not an Integer object.");
            }
            setMaxEntertain(((Integer) value).intValue());
            return true;
        }
        if (name.equals("Stones"))
        {
            if (value == null || ! (Integer.class.isInstance(value)))
            {
                throw new IllegalArgumentException("setByName: value parameter was null or not an Integer object.");
            }
            setStones(((Integer) value).intValue());
            return true;
        }
        if (name.equals("Trees"))
        {
            if (value == null || ! (Integer.class.isInstance(value)))
            {
                throw new IllegalArgumentException("setByName: value parameter was null or not an Integer object.");
            }
            setTrees(((Integer) value).intValue());
            return true;
        }
        if (name.equals("Sprouts"))
        {
            if (value == null || ! (Integer.class.isInstance(value)))
            {
                throw new IllegalArgumentException("setByName: value parameter was null or not an Integer object.");
            }
            setSprouts(((Integer) value).intValue());
            return true;
        }
        if (name.equals("Silver"))
        {
            if (value == null || ! (Integer.class.isInstance(value)))
            {
                throw new IllegalArgumentException("setByName: value parameter was null or not an Integer object.");
            }
            setSilver(((Integer) value).intValue());
            return true;
        }
        if (name.equals("Peasants"))
        {
            if (value == null || ! (Integer.class.isInstance(value)))
            {
                throw new IllegalArgumentException("setByName: value parameter was null or not an Integer object.");
            }
            setPeasants(((Integer) value).intValue());
            return true;
        }
        if (name.equals("Inhabitants"))
        {
            if (value == null || ! (Integer.class.isInstance(value)))
            {
                throw new IllegalArgumentException("setByName: value parameter was null or not an Integer object.");
            }
            setInhabitants(((Integer) value).intValue());
            return true;
        }
        if (name.equals("Iron"))
        {
            if (value == null || ! (Integer.class.isInstance(value)))
            {
                throw new IllegalArgumentException("setByName: value parameter was null or not an Integer object.");
            }
            setIron(((Integer) value).intValue());
            return true;
        }
        if (name.equals("Laen"))
        {
            if (value == null || ! (Integer.class.isInstance(value)))
            {
                throw new IllegalArgumentException("setByName: value parameter was null or not an Integer object.");
            }
            setLaen(((Integer) value).intValue());
            return true;
        }
        if (name.equals("Herb"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setHerb((String) value);
            return true;
        }
        return false;
    }

    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
        if (name.equals(RegionStatisticsDataPeer.ID))
        {
            return new Long(getID());
        }
        if (name.equals(RegionStatisticsDataPeer.REGION_ID))
        {
            return new Long(getRegionId());
        }
        if (name.equals(RegionStatisticsDataPeer.TURN))
        {
            return new Integer(getTurn());
        }
        if (name.equals(RegionStatisticsDataPeer.NAME))
        {
            return getName();
        }
        if (name.equals(RegionStatisticsDataPeer.DESCRIPTION))
        {
            return getDescription();
        }
        if (name.equals(RegionStatisticsDataPeer.MAX_RECRUITS))
        {
            return new Integer(getMaxRecruits());
        }
        if (name.equals(RegionStatisticsDataPeer.MAX_LUXURIES))
        {
            return new Integer(getMaxLuxuries());
        }
        if (name.equals(RegionStatisticsDataPeer.MAX_ENTERTAIN))
        {
            return new Integer(getMaxEntertain());
        }
        if (name.equals(RegionStatisticsDataPeer.STONES))
        {
            return new Integer(getStones());
        }
        if (name.equals(RegionStatisticsDataPeer.TREES))
        {
            return new Integer(getTrees());
        }
        if (name.equals(RegionStatisticsDataPeer.SPROUTS))
        {
            return new Integer(getSprouts());
        }
        if (name.equals(RegionStatisticsDataPeer.SILVER))
        {
            return new Integer(getSilver());
        }
        if (name.equals(RegionStatisticsDataPeer.PEASANTS))
        {
            return new Integer(getPeasants());
        }
        if (name.equals(RegionStatisticsDataPeer.INHABITANTS))
        {
            return new Integer(getInhabitants());
        }
        if (name.equals(RegionStatisticsDataPeer.IRON))
        {
            return new Integer(getIron());
        }
        if (name.equals(RegionStatisticsDataPeer.LAEN))
        {
            return new Integer(getLaen());
        }
        if (name.equals(RegionStatisticsDataPeer.HERB))
        {
            return getHerb();
        }
        return null;
    }

    /**
     * Set field values by Peer Field Name
     *
     * @param name field name
     * @param value field value
     * @return True if value was set, false if not (invalid name / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occurs with the set[Field] method.
     */
    public boolean setByPeerName(String name, Object value)
        throws TorqueException, IllegalArgumentException
    {
      if (RegionStatisticsDataPeer.ID.equals(name))
        {
            return setByName("ID", value);
        }
      if (RegionStatisticsDataPeer.REGION_ID.equals(name))
        {
            return setByName("RegionId", value);
        }
      if (RegionStatisticsDataPeer.TURN.equals(name))
        {
            return setByName("Turn", value);
        }
      if (RegionStatisticsDataPeer.NAME.equals(name))
        {
            return setByName("Name", value);
        }
      if (RegionStatisticsDataPeer.DESCRIPTION.equals(name))
        {
            return setByName("Description", value);
        }
      if (RegionStatisticsDataPeer.MAX_RECRUITS.equals(name))
        {
            return setByName("MaxRecruits", value);
        }
      if (RegionStatisticsDataPeer.MAX_LUXURIES.equals(name))
        {
            return setByName("MaxLuxuries", value);
        }
      if (RegionStatisticsDataPeer.MAX_ENTERTAIN.equals(name))
        {
            return setByName("MaxEntertain", value);
        }
      if (RegionStatisticsDataPeer.STONES.equals(name))
        {
            return setByName("Stones", value);
        }
      if (RegionStatisticsDataPeer.TREES.equals(name))
        {
            return setByName("Trees", value);
        }
      if (RegionStatisticsDataPeer.SPROUTS.equals(name))
        {
            return setByName("Sprouts", value);
        }
      if (RegionStatisticsDataPeer.SILVER.equals(name))
        {
            return setByName("Silver", value);
        }
      if (RegionStatisticsDataPeer.PEASANTS.equals(name))
        {
            return setByName("Peasants", value);
        }
      if (RegionStatisticsDataPeer.INHABITANTS.equals(name))
        {
            return setByName("Inhabitants", value);
        }
      if (RegionStatisticsDataPeer.IRON.equals(name))
        {
            return setByName("Iron", value);
        }
      if (RegionStatisticsDataPeer.LAEN.equals(name))
        {
            return setByName("Laen", value);
        }
      if (RegionStatisticsDataPeer.HERB.equals(name))
        {
            return setByName("Herb", value);
        }
        return false;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
        if (pos == 0)
        {
            return new Long(getID());
        }
        if (pos == 1)
        {
            return new Long(getRegionId());
        }
        if (pos == 2)
        {
            return new Integer(getTurn());
        }
        if (pos == 3)
        {
            return getName();
        }
        if (pos == 4)
        {
            return getDescription();
        }
        if (pos == 5)
        {
            return new Integer(getMaxRecruits());
        }
        if (pos == 6)
        {
            return new Integer(getMaxLuxuries());
        }
        if (pos == 7)
        {
            return new Integer(getMaxEntertain());
        }
        if (pos == 8)
        {
            return new Integer(getStones());
        }
        if (pos == 9)
        {
            return new Integer(getTrees());
        }
        if (pos == 10)
        {
            return new Integer(getSprouts());
        }
        if (pos == 11)
        {
            return new Integer(getSilver());
        }
        if (pos == 12)
        {
            return new Integer(getPeasants());
        }
        if (pos == 13)
        {
            return new Integer(getInhabitants());
        }
        if (pos == 14)
        {
            return new Integer(getIron());
        }
        if (pos == 15)
        {
            return new Integer(getLaen());
        }
        if (pos == 16)
        {
            return getHerb();
        }
        return null;
    }

    /**
     * Set field values by its position (zero based) in the XML schema.
     *
     * @param position The field position
     * @param value field value
     * @return True if value was set, false if not (invalid position / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occurs with the set[Field] method.
     */
    public boolean setByPosition(int position, Object value)
        throws TorqueException, IllegalArgumentException
    {
    if (position == 0)
        {
            return setByName("ID", value);
        }
    if (position == 1)
        {
            return setByName("RegionId", value);
        }
    if (position == 2)
        {
            return setByName("Turn", value);
        }
    if (position == 3)
        {
            return setByName("Name", value);
        }
    if (position == 4)
        {
            return setByName("Description", value);
        }
    if (position == 5)
        {
            return setByName("MaxRecruits", value);
        }
    if (position == 6)
        {
            return setByName("MaxLuxuries", value);
        }
    if (position == 7)
        {
            return setByName("MaxEntertain", value);
        }
    if (position == 8)
        {
            return setByName("Stones", value);
        }
    if (position == 9)
        {
            return setByName("Trees", value);
        }
    if (position == 10)
        {
            return setByName("Sprouts", value);
        }
    if (position == 11)
        {
            return setByName("Silver", value);
        }
    if (position == 12)
        {
            return setByName("Peasants", value);
        }
    if (position == 13)
        {
            return setByName("Inhabitants", value);
        }
    if (position == 14)
        {
            return setByName("Iron", value);
        }
    if (position == 15)
        {
            return setByName("Laen", value);
        }
    if (position == 16)
        {
            return setByName("Herb", value);
        }
        return false;
    }
     
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
        save(RegionStatisticsDataPeer.DATABASE_NAME);
    }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
     *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
        try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }
    }

    /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
        if (!alreadyInSave)
        {
            alreadyInSave = true;



            // If this object has been modified, then save it to the database.
            if (isModified())
            {
                if (isNew())
                {
                    RegionStatisticsDataPeer.doInsert((RegionStatisticsData) this, con);
                    setNew(false);
                }
                else
                {
                    RegionStatisticsDataPeer.doUpdate((RegionStatisticsData) this, con);
                }
            }


            if (collRegionStatisticsShipDatas != null)
            {
                for (int i = 0; i < collRegionStatisticsShipDatas.size(); i++)
                {
                    ((RegionStatisticsShipData) collRegionStatisticsShipDatas.get(i)).save(con);
                }
            }

            if (collRegionStatisticsPricesDatas != null)
            {
                for (int i = 0; i < collRegionStatisticsPricesDatas.size(); i++)
                {
                    ((RegionStatisticsPricesData) collRegionStatisticsPricesDatas.get(i)).save(con);
                }
            }

            if (collRegionStatisticsResourcesDatas != null)
            {
                for (int i = 0; i < collRegionStatisticsResourcesDatas.size(); i++)
                {
                    ((RegionStatisticsResourcesData) collRegionStatisticsResourcesDatas.get(i)).save(con);
                }
            }
            alreadyInSave = false;
        }
    }


    /**
     * Set the PrimaryKey using ObjectKey.
     *
     * @param key iD ObjectKey
     */
    public void setPrimaryKey(ObjectKey key)
        throws TorqueException
    {
        setID(((NumberKey) key).longValue());
    }

    /**
     * Set the PrimaryKey using a String.
     *
     * @param key
     */
    public void setPrimaryKey(String key) throws TorqueException
    {
        setID(Long.parseLong(key));
    }


    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
        return SimpleKey.keyFor(getID());
    }
 

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     */
    public RegionStatisticsData copy() throws TorqueException
    {
        return copy(true);
    }

    /**
     * Makes a copy of this object using connection.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     *
     * @param con the database connection to read associated objects.
     */
    public RegionStatisticsData copy(Connection con) throws TorqueException
    {
        return copy(true, con);
    }

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * If the parameter deepcopy is true, it then fills all the
     * association collections and sets the related objects to
     * isNew=true.
     *
     * @param deepcopy whether to copy the associated objects.
     */
    public RegionStatisticsData copy(boolean deepcopy) throws TorqueException
    {
        return copyInto(new RegionStatisticsData(), deepcopy);
    }

    /**
     * Makes a copy of this object using connection.
     * It creates a new object filling in the simple attributes.
     * If the parameter deepcopy is true, it then fills all the
     * association collections and sets the related objects to
     * isNew=true.
     *
     * @param deepcopy whether to copy the associated objects.
     * @param con the database connection to read associated objects.
     */
    public RegionStatisticsData copy(boolean deepcopy, Connection con) throws TorqueException
    {
        return copyInto(new RegionStatisticsData(), deepcopy, con);
    }
  
    /**
     * Fills the copyObj with the contents of this object.
     * The associated objects are also copied and treated as new objects.
     *
     * @param copyObj the object to fill.
     */
    protected RegionStatisticsData copyInto(RegionStatisticsData copyObj) throws TorqueException
    {
        return copyInto(copyObj, true);
    }

  
    /**
     * Fills the copyObj with the contents of this object using connection.
     * The associated objects are also copied and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @param con the database connection to read associated objects.
     */
    protected RegionStatisticsData copyInto(RegionStatisticsData copyObj, Connection con) throws TorqueException
    {
        return copyInto(copyObj, true, con);
    }
  
    /**
     * Fills the copyObj with the contents of this object.
     * If deepcopy is true, The associated objects are also copied
     * and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @param deepcopy whether the associated objects should be copied.
     */
    protected RegionStatisticsData copyInto(RegionStatisticsData copyObj, boolean deepcopy) throws TorqueException
    {
        copyObj.setID(iD);
        copyObj.setRegionId(regionId);
        copyObj.setTurn(turn);
        copyObj.setName(name);
        copyObj.setDescription(description);
        copyObj.setMaxRecruits(maxRecruits);
        copyObj.setMaxLuxuries(maxLuxuries);
        copyObj.setMaxEntertain(maxEntertain);
        copyObj.setStones(stones);
        copyObj.setTrees(trees);
        copyObj.setSprouts(sprouts);
        copyObj.setSilver(silver);
        copyObj.setPeasants(peasants);
        copyObj.setInhabitants(inhabitants);
        copyObj.setIron(iron);
        copyObj.setLaen(laen);
        copyObj.setHerb(herb);

        copyObj.setID( 0);

        if (deepcopy)
        {


        List<RegionStatisticsShipData> vRegionStatisticsShipDatas = getRegionStatisticsShipDatas();
        if (vRegionStatisticsShipDatas != null)
        {
            for (int i = 0; i < vRegionStatisticsShipDatas.size(); i++)
            {
                RegionStatisticsShipData obj =  vRegionStatisticsShipDatas.get(i);
                copyObj.addRegionStatisticsShipData(obj.copy());
            }
        }
        else
        {
            copyObj.collRegionStatisticsShipDatas = null;
        }


        List<RegionStatisticsPricesData> vRegionStatisticsPricesDatas = getRegionStatisticsPricesDatas();
        if (vRegionStatisticsPricesDatas != null)
        {
            for (int i = 0; i < vRegionStatisticsPricesDatas.size(); i++)
            {
                RegionStatisticsPricesData obj =  vRegionStatisticsPricesDatas.get(i);
                copyObj.addRegionStatisticsPricesData(obj.copy());
            }
        }
        else
        {
            copyObj.collRegionStatisticsPricesDatas = null;
        }


        List<RegionStatisticsResourcesData> vRegionStatisticsResourcesDatas = getRegionStatisticsResourcesDatas();
        if (vRegionStatisticsResourcesDatas != null)
        {
            for (int i = 0; i < vRegionStatisticsResourcesDatas.size(); i++)
            {
                RegionStatisticsResourcesData obj =  vRegionStatisticsResourcesDatas.get(i);
                copyObj.addRegionStatisticsResourcesData(obj.copy());
            }
        }
        else
        {
            copyObj.collRegionStatisticsResourcesDatas = null;
        }
        }
        return copyObj;
    }
        
    
    /**
     * Fills the copyObj with the contents of this object using connection.
     * If deepcopy is true, The associated objects are also copied
     * and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @param deepcopy whether the associated objects should be copied.
     * @param con the database connection to read associated objects.
     */
    protected RegionStatisticsData copyInto(RegionStatisticsData copyObj, boolean deepcopy, Connection con) throws TorqueException
    {
        copyObj.setID(iD);
        copyObj.setRegionId(regionId);
        copyObj.setTurn(turn);
        copyObj.setName(name);
        copyObj.setDescription(description);
        copyObj.setMaxRecruits(maxRecruits);
        copyObj.setMaxLuxuries(maxLuxuries);
        copyObj.setMaxEntertain(maxEntertain);
        copyObj.setStones(stones);
        copyObj.setTrees(trees);
        copyObj.setSprouts(sprouts);
        copyObj.setSilver(silver);
        copyObj.setPeasants(peasants);
        copyObj.setInhabitants(inhabitants);
        copyObj.setIron(iron);
        copyObj.setLaen(laen);
        copyObj.setHerb(herb);

        copyObj.setID( 0);

        if (deepcopy)
        {


        List<RegionStatisticsShipData> vRegionStatisticsShipDatas = getRegionStatisticsShipDatas(con);
        if (vRegionStatisticsShipDatas != null)
        {
            for (int i = 0; i < vRegionStatisticsShipDatas.size(); i++)
            {
                RegionStatisticsShipData obj =  vRegionStatisticsShipDatas.get(i);
                copyObj.addRegionStatisticsShipData(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collRegionStatisticsShipDatas = null;
        }


        List<RegionStatisticsPricesData> vRegionStatisticsPricesDatas = getRegionStatisticsPricesDatas(con);
        if (vRegionStatisticsPricesDatas != null)
        {
            for (int i = 0; i < vRegionStatisticsPricesDatas.size(); i++)
            {
                RegionStatisticsPricesData obj =  vRegionStatisticsPricesDatas.get(i);
                copyObj.addRegionStatisticsPricesData(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collRegionStatisticsPricesDatas = null;
        }


        List<RegionStatisticsResourcesData> vRegionStatisticsResourcesDatas = getRegionStatisticsResourcesDatas(con);
        if (vRegionStatisticsResourcesDatas != null)
        {
            for (int i = 0; i < vRegionStatisticsResourcesDatas.size(); i++)
            {
                RegionStatisticsResourcesData obj =  vRegionStatisticsResourcesDatas.get(i);
                copyObj.addRegionStatisticsResourcesData(obj.copy(con), con);
            }
        }
        else
        {
            copyObj.collRegionStatisticsResourcesDatas = null;
        }
        }
        return copyObj;
    }
    
    

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public RegionStatisticsDataPeer getPeer()
    {
        return peer;
    }

    /**
     * Retrieves the TableMap object related to this Table data without
     * compiler warnings of using getPeer().getTableMap().
     *
     * @return The associated TableMap object.
     */
    public TableMap getTableMap() throws TorqueException
    {
        return RegionStatisticsDataPeer.getTableMap();
    }


    public String toString()
    {
        StringBuffer str = new StringBuffer();
        str.append("RegionStatisticsData:\n");
        str.append("ID = ")
           .append(getID())
           .append("\n");
        str.append("RegionId = ")
           .append(getRegionId())
           .append("\n");
        str.append("Turn = ")
           .append(getTurn())
           .append("\n");
        str.append("Name = ")
           .append(getName())
           .append("\n");
        str.append("Description = ")
           .append(getDescription())
           .append("\n");
        str.append("MaxRecruits = ")
           .append(getMaxRecruits())
           .append("\n");
        str.append("MaxLuxuries = ")
           .append(getMaxLuxuries())
           .append("\n");
        str.append("MaxEntertain = ")
           .append(getMaxEntertain())
           .append("\n");
        str.append("Stones = ")
           .append(getStones())
           .append("\n");
        str.append("Trees = ")
           .append(getTrees())
           .append("\n");
        str.append("Sprouts = ")
           .append(getSprouts())
           .append("\n");
        str.append("Silver = ")
           .append(getSilver())
           .append("\n");
        str.append("Peasants = ")
           .append(getPeasants())
           .append("\n");
        str.append("Inhabitants = ")
           .append(getInhabitants())
           .append("\n");
        str.append("Iron = ")
           .append(getIron())
           .append("\n");
        str.append("Laen = ")
           .append(getLaen())
           .append("\n");
        str.append("Herb = ")
           .append(getHerb())
           .append("\n");
        return(str.toString());
    }
}
